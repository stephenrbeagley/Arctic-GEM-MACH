!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_diff_chronos.ftn90
! Creation       : Paul Makar, Sylvie Gravel nov 2007
! Description    : Vertical diffusion for chemical species
!
! Extra info     : The method is described in "Vertical_diffusion_in_CHRONOS_AURAMS_and_GEM-MACH.doc"
!                  The specific variation calculated here the use of a 1/2 layer thick shadow zone
!                  above and below the region in order to define the derivatives at the model top
!                  and model bottom.  i.e. similar to the method used in CHRONOS.
!                  In order to reduce processing time, portions of the matrix system that are
!                  species invariant are calculated first, and the species dependant terms are
!                  added in where appropriate in the processing.  Index ii refers to species
!                  dependant variables, with inner inner index size ni_net = ni*nsp_diff*nb_bins.
!                  Index i refers to species independant variables, with inner index size ni.
!
! Arguments:
!           IN
!              emissions  -> The sum of area and biogenic emissions
!              vd         -> Dry deposition velocities for gas
!              ubf        -> Species upper lid flux boundary condition index values
!              kt         -> Thermal vertical diffusion coefficient
!              area       -> Area of grid square
!              rho        -> Air density
!              ni         -> Grid size ni
!              nsp_diff   -> Number of chemical species to be diffused
!              ni_net     -> ni * nsp_diff * nb_bins
!              nk         -> Nb of vertical levels
!              zf         -> Concentration-layer height above sea-level
!              zh         -> Diffusion constant height above sea-level
!              dt         -> Chemistry timestep
!              nb_bins    -> Number of bins per chemical species (1 for gaseous species)
!
!           INOUT
!              CONC       ->   species concentrations
!
!=============================================================================

subroutine mach_diff_chronos(CONC, emissions, vd, ubf, kt, area, rho,      &
                             ni, ni_net, nsp_diff, nk, zf, zh, dt, nb_bins )
   use chm_utils_mod
   use mach_headers_mod, only: mach_tridiag
   use chm_species_idx_mod
   use chm_species_info_mod
   use mach_pkg_debug_mod, only: dbg_chmbusvol
   implicit none

   integer, intent(in)    :: ni, ni_net, nk, nsp_diff, nb_bins
   real,    intent(in)    :: dt, zf(ni, nk), zh(ni, nk), kt(ni, nk)
   real,    intent(in)    :: vd(ni_net), emissions(ni_net), ubf(ni_net)
   real,    intent(in)    :: area(ni), rho(ni, nk)
   real,    intent(inout) :: conc(ni_net, nk)

   integer :: i, k, sp_idx, ii

!  local workspace arrays and variables:

   real :: a(ni, nk), af(ni_net, nk)
   real :: b(ni, nk), bf(ni_net, nk)
   real :: c(ni, nk), cf(ni_net, nk)
   real :: beta(ni_net, nk)
   real :: b1
   real :: triwk1(ni_net), triwk2(ni_net, nk)
   logical local_dbg
   real :: maxmassratio, minmassratio
!
!  diagnostic arrays
!
   real, dimension(:, :) :: colmassa(ni, nsp_diff * nb_bins), colmassb(ni, nsp_diff * nb_bins)
   real, dimension(:, :) :: colmassc(ni, nsp_diff * nb_bins), colmass0(ni, nsp_diff * nb_bins)

   local_dbg = (.false. .or. global_debug)

   if (local_dbg) then
      write (chm_lun_out, *) "Entering mach_diff_chronos"
   end if
! column mass diagnosis
   colmass0 = 0.0
   do i = 1 , ni
      do sp_idx = 1 , nsp_diff * nb_bins
         ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)
         do k = 2, nk - 1
            colmass0(i, sp_idx) = colmass0(i, sp_idx) + conc(ii, k) * rho(i, k) * (zh(i, k - 1) - zh(i, k))
         end do
!  top
         colmass0(i, sp_idx) = colmass0(i, sp_idx) + conc(ii, 1) * rho(i, 1) * (zf(i, 1) - zh(i, 1))
!  bottom
         colmass0(i, sp_idx) = colmass0(i, sp_idx) + conc(ii, nk) * rho(i, nk) * (zh(i, nk - 1) - zf(i, nk))
      end do
   end do

! output column mass for SO2, O3, and CO before diffusion
   if (nb_bins == 1) then
    do i=1,ni
     dbg_chmbusvol(sm(dbg_2d(1)) % vol_offset + i - 1) = colmass0(i,1)
     dbg_chmbusvol(sm(dbg_2d(2)) % vol_offset + i - 1) = colmass0(i,5)
     dbg_chmbusvol(sm(dbg_2d(3)) % vol_offset + i - 1) = colmass0(i,28)
    end do
   end if

! use colmassb for mass change due to surface flux
   colmassb = 0.0
   do i = 1 , ni
      do sp_idx = 1 , nsp_diff * nb_bins
       ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)
! emission
       colmassb(i, sp_idx) = colmassb(i, sp_idx) + emissions(ii) * dt / (rho(i,nk) * area(i) * (zf(i,nk-1) - zf(i,nk)))
! dry deposition
       colmassb(i, sp_idx) = colmassb(i, sp_idx) - 2. * vd(ii) * dt * conc(ii,nk) / (zf(i,nk-1) - zf(i,nk))
      end do
   end do

! output mass change due to surface fluxes for SO2, O3, and CO
   if (nb_bins == 1) then
    do i=1,ni
     dbg_chmbusvol(sm(dbg_2d(7)) % vol_offset + i - 1) = colmassb(i,1)
     dbg_chmbusvol(sm(dbg_2d(8)) % vol_offset + i - 1) = colmassb(i,5)
     dbg_chmbusvol(sm(dbg_2d(9)) % vol_offset + i - 1) = colmassb(i,28)
    end do
   end if

!  Test:  add emitted mass to first layer:
   do i = 1, ni
      do sp_idx = 1, nsp_diff * nb_bins
         ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)
         conc(ii, nk) = conc(ii, nk) + emissions(ii) * dt / (rho(i, nk) * area(i) * (zf(i, nk - 1) - zf(i, nk)) )
      end do
   end do
!!  Test:  deposition as exponential decay from first layer:
!  Test to replace the exponential decay with flux removal:
   do i = 1, ni
      do sp_idx = 1, nsp_diff * nb_bins
         ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)
!         conc(ii, nk) = conc(ii, nk) * exp(-vd(ii) * dt / (zf(i, nk - 1) - zf(i, nk)))
         conc(ii, nk) = conc(ii, nk) * (1. - 2. * vd(ii) * dt / (zf(i, nk-1) - zf(i, nk)))
      end do
   end do


!  First, calculate the coefficients for the desired matrix-vector system, for the
!  current time-step:
!  Interior rows of tridiagonal matrix:
   do k = 2, nk - 1
      do i = 1, ni
         c(i, k) = - dt * kt(i, nk - k) / (zf(i, nk - k) - zf(i, nk - k + 1))         &
                        / (zh(i, nk - k) - zh(i, nk - k + 1))
         a(i, k) = - dt * kt(i, nk - k + 1) / (zf(i, nk - k + 1) - zf(i, nk - k + 2)) &
                        / (zh(i, nk - k) - zh(i, nk - k + 1))
         b(i, k) = 1. - c(i, k) - a(i, k)
      end do
   end do

   do i = 1, ni

!  Top and bottom (boundary condition rows)
!  bottom layer equations:

      b1      = (zf(i, nk - 1) - zf(i, nk)) **2
      c(i, 1) = - dt * kt(i, nk - 1) / b1
      b(i, 1) = 1. - c(i, 1)

!  top layer equations:

      b1       = (zf(i, 1) - zf(i, 2)) **2
      a(i, nk) = - dt * kt(i, 1) / b1
      b(i, nk) =  1. - a(i, nk)
   end do

!  Prepare rhs of equation
!  All species:

   do k = 1, nk
      do ii = 1, ni_net
         beta(ii, k) = conc(ii, nk - k + 1)
      end do
   end do

!  Transfer species invariant portions of matrix to larger matrix with
!  ni*nsp_diff*nb_bins as the inner index:

   do k = 1, nk
      do i = 1, ni
         do sp_idx = 1, nsp_diff * nb_bins
            ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)
            af(ii, k) = a(i, k)
            bf(ii, k) = b(i, k)
            cf(ii, k) = c(i, k)
         end do
      end do
   end do

   do i = 1, ni
      do sp_idx = 1, nsp_diff * nb_bins
         ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)

!!!  Deposition and emissions as flux terms:  commented out in this version:
!!!  add deposition term:
!!!         bf(ii, 1)    =  bf(ii, 1) + 2. * dt * vd(ii) / (zf(i, nk - 1) - zf(i, nk))
!!!  add emission term on rhs
!!!         beta(ii, 1)  =  beta(ii, 1) +  &
!!!             emissions(ii) * dt / (rho(i, nk) * area(i) * (zf(i, nk - 1) - zf(i, nk)) )

! upper lid source term added on rhs:
         beta(ii, nk) =  beta(ii, nk) - &
                           ubf(ii) * dt / (rho(i, 1) * area(i) * (zf(i, 1) - zf(i, 2)) )
      end do
   end do

! Some diagnostics
!  check column mass:
!  add mass in each column before the update:
!
   colmassb = 0.0
   do i = 1 , ni
      do sp_idx = 1 , nsp_diff * nb_bins
         ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)
         do k = 2, nk - 1
            colmassb(i, sp_idx) = colmassb(i, sp_idx) + conc(ii, k) * rho(i, k) * (zh(i, k - 1) - zh(i, k))
         end do
!  top
         colmassb(i, sp_idx) = colmassb(i, sp_idx) + conc(ii, 1) * rho(i, 1) * (zf(i, 1) - zh(i, 1))
!  bottom
         colmassb(i, sp_idx) = colmassb(i, sp_idx) + conc(ii, nk) * rho(i, nk) * (zh(i, nk - 1) - zf(i, nk))
      end do
   end do

   call mach_tridiag(af, bf, cf, beta, triwk1, triwk2, CONC, ni_net, nk)

   do k = 1, nk
      do ii = 1, ni_net
         beta(ii, k) = conc(ii, nk - k + 1)
      end do
   end do
   conc = beta


   colmassa = 0.
   do i = 1, ni
      do sp_idx = 1, nsp_diff * nb_bins
         ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)
         do k = 2, nk - 1
            colmassa(i, sp_idx) = colmassa(i, sp_idx) + conc(ii, k) * rho(i, k) * (zh(i, k - 1) - zh(i, k))
         end do
!  top
         colmassa(i, sp_idx) = colmassa(i, sp_idx) + conc(ii, 1) * rho(i, 1) * (zf(i, 1) - zh(i, 1))
!  bottom
         colmassa(i, sp_idx) = colmassa(i, sp_idx) + conc(ii, nk) * rho(i, nk) * (zh(i, nk - 1) - zf(i, nk))
!  for mass closure, need to subtract off emission flux and add
!  in the deposition loss:
!  Do emissions elsewhere in the next test.
!     colmassa(i, sp_idx)=colmassa(i, sp_idx)-emissions(ii) * dt / area(i)
      end do
   end do
!
!  Calculate the ratio of column masses:
!
   maxmassratio = -1E20
   minmassratio = 1E20
   do i = 1, ni
      do sp_idx = 1, nsp_diff * nb_bins
         if(colmassb(i, sp_idx) == 0.0) then
            colmassc(i, sp_idx) = -999.0
         else
            colmassc(i, sp_idx) = colmassa(i, sp_idx) / colmassb(i, sp_idx)
         end if
         if(colmassc(i, sp_idx) /= -999.0) then
            maxmassratio = max(maxmassratio, colmassc(i, sp_idx))
            minmassratio = min(minmassratio, colmassc(i, sp_idx))
         end if
      end do
   end do

! Mass Conservation enforced: Correct ratio of column masses:
!
   do k = 1, nk
      do i = 1, ni
         do sp_idx = 1, nsp_diff * nb_bins
            ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)
            if(colmassa(i, sp_idx) > 0.0) then
               conc(ii, k) = conc(ii, k) * colmassb(i, sp_idx) / colmassa(i, sp_idx)
            end if
         end do
      end do
   end do
!
   colmassa = 0.
   do i = 1, ni
      do sp_idx = 1, nsp_diff * nb_bins
         ii = calc_ii(sp_idx, i, nsp_diff, nb_bins)
         do k = 2, nk - 1
            colmassa(i, sp_idx) = colmassa(i, sp_idx) + conc(ii, k) * rho(i, k) * (zh(i, k - 1) - zh(i, k))
         end do
!  top
         colmassa(i, sp_idx) = colmassa(i, sp_idx) + conc(ii, 1) * rho(i, 1) * (zf(i, 1) - zh(i, 1))
!  bottom
         colmassa(i, sp_idx) = colmassa(i, sp_idx) + conc(ii, nk) * rho(i, nk) * (zh(i, nk - 1) - zf(i, nk))
!  for mass closure, need to subtract off emission flux and add
!  in the deposition loss:
!  Do emissions elsewhere in the next test.
!     colmassa(i, sp_idx)=colmassa(i, sp_idx)-emissions(ii) * dt / area(i)
      end do
   end do

! output column mass difference for SO2, O3, and CO after dissfusion
   if (nb_bins == 1) then
    do i=1,ni
     dbg_chmbusvol(sm(dbg_2d(4)) % vol_offset + i - 1) = colmassa(i,1) - colmass0(i,1)
     dbg_chmbusvol(sm(dbg_2d(5)) % vol_offset + i - 1) = colmassa(i,5) - colmass0(i,5)
     dbg_chmbusvol(sm(dbg_2d(6)) % vol_offset + i - 1) = colmassa(i,28) - colmass0(i,28)
    end do
   end if

!
!
!  reCalculate the ratio of column masses:
!
   maxmassratio = -1E20
   minmassratio = 1E20
   do i = 1, ni
      do sp_idx = 1, nsp_diff * nb_bins
         if(colmassb(i, sp_idx) == 0.0) then
            colmassc(i, sp_idx) = -999.0
         else
            colmassc(i, sp_idx) = colmassa(i, sp_idx) / colmassb(i, sp_idx)
         end if
         if(colmassc(i, sp_idx) /= -999.0) then
            maxmassratio = max(maxmassratio, colmassc(i, sp_idx))
            minmassratio = min(minmassratio, colmassc(i, sp_idx))
         end if
      end do
   end do

!  conc now holds the updated species concentrations
   if (local_dbg) then
      write (chm_lun_out, *) "Leaving mach_diff_chronos"
   end if

   return

   contains
   integer function calc_ii(sp_idx, i, nsp_diff, nb_bins)
      integer, intent(in) :: sp_idx, i, nsp_diff, nb_bins
      calc_ii = sp_idx + (i - 1) * nsp_diff * nb_bins
   end function calc_ii

end
