!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_tridiag.ftn90
! Creation       : Paul Makar, nov 2007
! Description    : Solution of the tridiagonal system of equations
!
! Extra info     : Based on Janusz Pudykiewicz, March 1995
!                  Follows algorithm found in "Numerical Recipes".
!                  Note that the potential exists for a division by zero error in the
!                  following, in that if array "bet" happens to = zero, then a division
!                  by zero error could occur.  However, the same algorithm has been
!                  used in AURAMS and CHRONOS for many years without encountering
!                  this error condition, and to add a check here would slow down the
!                  processing.
! Arguments:
!           IN
!              a, b, c, r -> matrix terms
!              ni         -> grid size ni
!              nk         -> Nb of vertical levels
!
!           OUT
!              bet ->
!              gam ->
!
!           INOUT
!              u   ->
!
!=============================================================================
subroutine mach_tridiag (a, b, c, r, bet, gam, u, ni, nk)
   use chm_utils_mod
   implicit none

   integer, intent(in)    :: ni, nk
   real,    intent(in)    :: a(ni, nk), b(ni, nk), c(ni, nk), r(ni, nk)
   real,    intent(inout) :: u(ni, nk)
   real,    intent(out)   :: bet(ni), gam(ni, nk)

   integer  :: i, j
!--------------------------------------------------------------------------
!
!  solves for a vector u of length n the tridiagonal linear set:
!
!       b1  c1                        u1      r1
!       a2  b2  c2                 =  u2      r2
!
!
!                           aN  bN    uN      rN
!
!  a, b, c and r are input vectors and are not modified
!
!--------------------------------------------------------------------------

   do i = 1, ni
      bet(i) = b(i, 1)
      u(i, 1) = r(i, 1) /  bet(i)
   end do

      do j = 2, nk
         do i = 1, ni
            gam(i, j) = c(i, j - 1) / bet(i)
            bet(i) = b(i, j) - a(i, j) * gam(i, j)
            u(i, j) = (r(i, j) - a(i, j) * u(i, j - 1)) / bet(i)
         end do
      end do

!  backsubstitution

   do j = nk - 1, 1, -1
      do i = 1, ni
         u(i, j) = u(i, j) - gam(i, j + 1) * u(i, j + 1)
      end do
   end do
   return
end
