!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_hetv_case4.ftn90
! Creation       : P. Makar, V. Bouchet, A. Nenes, S. Gravel, B. Pabla, S. Menard
! Description    : Heterogeneous chemistry solver for case4.  Based on algorithm's
!                  in Nenes et al's ISORROPIA solver, recoded to vectorize over the
!                  gridpoint dimension.  All input arrays are of length npts (total
!                  number of gridpoints submitted from the calling code.  The
!                  subsection of each 1-D array between index ns4 and ne4 (inclusive)
!                  has been pre-sorted, and contains the gridpoint data that must
!                  be solved using case4's algorithm.  Operations within this
!                  subroutine therefore take place over array bounds from ns4 to ne4.
!
!                  Units on input are moles/kg air.
!
! Extra info     : Athanasios Nenes, Mail Code 210-41, Dept. of Chemical Engineering,
!                  California Institute of Technology, Pasadena, Ca., 91125, USA
!                  nenes@its.caltech.edu
!
!                  The conditions for which this case is called are as follows:
!                        1 <= TA/TS < 1.5, mdrh_leto_ambis <= RH < drh_ambis
!                  This case uses linear interpolation between the solutions for the
!                  systems of equations for "dry" and "wet" conditions.
!                  The dry case and conditions are:
!                     case 3, 1 <= TA/TS < 1.5, rn < mdrh_leto_ambis
!                  The wet case and wet case conditions are:
!                     case 5, 1 <= TA/TS < 1.5, drh_ambis <= RH < drh_leto
!                  Interpolation is based on the parameter WF1; the linear interpolant
!                  between wet and dry systems.  When WF1 = 1, the dry system is the
!                  solution, when WF1 = 0, the wet system is the solution.  Values of
!                  WF between these limits indicate an interpolation between the solutions
!                  for the wet and dry cases. For the conditions noted above,
!                  the value of WF is given by:
!                  wf = ( drh_ambis - rh ) / ( drh_ambis - mdrh_leto_ambis)
!
! Arguments  IN
!
!            OUT
!
!=============================================================================

subroutine mach_hetv_case4 (npts, nr, ns4, ne4, so4, no3, nh4, hso4, hno3, h, nh3, amsul, ambis,    &
                           amnit, leto, t, tc, p, rh, iter, itero, k0, p1, p2, eps, eps2, lwn,  &
                           ta, ts, tn, mdrh_leto_ambis, drh_ambis, ndiv, tstd, small, smrt)

   implicit none

!  Array size and boundary declarations:
      integer, intent(in) :: npts, nr, ns4, ne4
      integer, intent(in) :: iter, itero, ndiv
      real *8, intent(in) :: tstd, small, smrt, eps, eps2
      real *8, intent(in), dimension(npts) :: t, p, rh, tc, mdrh_leto_ambis, drh_ambis
      real *8, intent(in), dimension(nr)   :: k0, p1, p2
      real *8, intent(out), dimension(npts) :: so4, no3, nh4, hso4, leto, h, lwn
      real *8, intent(inout), dimension(npts) :: amsul, ambis, amnit, hno3, nh3, ta, ts, tn

!  Local variables:
      integer  :: i
      real *8 :: wfmin, wfmax
      real *8, dimension(npts) :: so4d, no3d, nh4d, hso4d, amsuld, ambisd, amnitd, letod, hd, hno3d, nh3d
      real *8, dimension(npts) :: wf, wf1

!  Array dimensioning check:
   if (ns4 < 1 .or. ns4 > npts .or. ne4 > npts .or. ne4 < ns4) then
      write(0, *) '### Error in mach_hetv_case4 ###'
      write(0, *) '# Error in array bounds in case4'
      write(0, *) '###         ABORT         ###'
      call chm_stop('mach_hetv_case4', -1)
   end if

!  Calculate value of WF.
   wfmin = 2.0d0
   wfmax = -2.0d0
   do i = ns4, ne4
      wf(i) = (drh_ambis(i) - rh(i)) / (drh_ambis(i) - mdrh_leto_ambis(i))
      wfmin = min(wfmin, wf(i))
      wfmax = max(wfmax, wf(i))
   end do
   if (wfmax > 1.0d0) then
      write(0, *) '### Error in mach_hetv_case4 ###'
      write(0, *) '# interpolant out of bounds ( > 1) in case4.'
      write(0, *) '###         ABORT         ###'
      call chm_stop('mach_hetv_case4', -1)
   end if
   if (wfmin < 0.0d0) then
      write(0, *) '### Error in mach_hetv_case4 ###'
      write(0, *) '# interpolant out of bounds ( < 0) in case4.'
      write(0, *) '###         ABORT         ###'
      call chm_stop('mach_hetv_case4', -1)
   end if
   do i = ns4, ne4
      wf1(i) = min(max(1.0d0 - wf(i),0.D0),1.D0)
   end do

!  Calculate dry particle gases and components using Case .
   call mach_hetv_case3(npts, ns4, ne4, so4d, no3d, nh4d, hso4d, hno3d, hd,             &
                        nh3d, amsuld, ambisd, amnitd, letod, lwn, ta, ts, tn)

!  Calculate wet particle gases and components
!  using Case .
   call mach_hetv_case5(npts, nr, ns4, ne4, so4, no3, nh4, hso4, hno3, h,               &
                        nh3, amsul, ambis, amnit, leto, t, tc, p, rh, iter, itero,      &
                        k0, p1, p2, eps, eps2, lwn, ta, ts, tn, ndiv, tstd, small, smrt)

!  Interpolate between the two cases to get the final result (which
!  replaces the array variables used for the wet case):
   do i = ns4, ne4
      h(i)    = wf1(i) * h(i)
      nh4(i)  = wf1(i) * nh4(i)
      no3(i)  = wf1(i) * no3(i)
      hso4(i) = wf1(i) * hso4(i)
      so4(i)  = wf1(i) * so4(i)

!  Solid phases, gases:
      amsul(i) = wf(i) * amsuld(i) + wf1(i) * amsul(i)
      amnit(i) = wf(i) * amnitd(i) + wf1(i) * amnit(i)
      ambis(i) = wf(i) * ambisd(i) + wf1(i) * ambis(i)
      leto(i)  = wf(i) * letod(i)  + wf1(i) * leto(i)
      nh3(i)   = wf(i) * nh3d(i)   + wf1(i) * nh3(i)
      hno3(i)  = wf(i) * hno3d(i)  + wf1(i) * hno3(i)
   end do

return
end
