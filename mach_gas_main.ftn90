!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_gas_main.ftn90
! Creation       : P. Makar, B. Pabla, S. Menard Feb 2007 for GEM-MACH
!                  Janusz Pudykiewicz for CHRONOS 1995
! Description    : Entry point for Gas-phase chemistry process describing NOX/VOC system
!
! Extra info     : - Modifications to do cloud photolysis correction (P. Makar, Sept 1998)
!                  - Modification to calculate NON-mass conserving condensable
!                    organic mass for later SOA calculations. Method of Odum
!                    et al., and the two product yield method from Seinfeld's
!                    lab, along with corrections to account for lumping, have
!                    been used. (P. Makar, July 1999).
!                  - Changed test variable for first time step from KT to
!                    IFIRST for initialization of initial total SOA mass (M. Moran, Jan 2000)
!                  - Implement the general form of the instantaneous aerosol yield,
!                    split OC into primary and secondary (Jiang, July 2004)
!
! Arguments:  IN
!               nu             -> Total cloud fraction at each layer (0.0-1.0)
!               gz_chm         -> Interface height above sea-level
!               gz_k           -> Mid-layer height above sea level
!               qc             -> Cloud water/ice (kg/kg) air
!               p2d            -> Pressure (Pa)
!               tt             ->  Temperature (K)
!               hu             -> Specific humidity (kg H2O/kg air)
!               rho            -> 3-D air density array (kg/m^3)
!               cx             -> Cosine of solar zenith angle
!               F_chm_ni       -> No. x-direction (W-E) gridpoints
!               nk             -> No. z-direction vertical levels
!               f_step         -> Flag for first chem. step in current
!
!             INOUT
!               F_CHMBUSVOL    -> Chemistry volatile buses
!               F_CHMBUSDYN    -> Chemistry dynamic bus
!
!             OUT
!               OLDSO4         -> SO4 concentration before gas chemistry (used in CAM)
!
!============================================================================

subroutine mach_gas_main(F_CHMBUSDYN, F_CHMBUSVOL, nu, OLDSO4, gz_chm, gz_k,           &
                         qc, p2d, tt, hu, rho, cx, vocc, vocr, brch, f_chm_ni, nk, f_step)
   use chm_utils_mod
   use chm_consphychm_mod
   use chm_nml_mod
   use mach_gas_chemicbi_mod
   use chm_species_info_mod
   use chm_species_idx_mod
   use mach_gas_headers_mod, only: mach_gas_chemi, mach_gas_jcorr, mach_gas_uprate, mach_gas_drive, mach_gas_soa_yield
   implicit none

!  Arguments
   real, dimension(*), intent(inout)   :: f_chmbusdyn, f_chmbusvol
   integer, intent(in)  :: f_chm_ni, nk, f_step
   real,    intent(in)  :: nu(f_chm_ni, nk), gz_chm(f_chm_ni, nk), gz_k(f_chm_ni, nk), qc(f_chm_ni, nk)
   real,    intent(in)  :: hu(f_chm_ni, nk), tt(f_chm_ni, nk), p2d(f_chm_ni, nk), rho(f_chm_ni, nk), cx(f_chm_ni)
   real,    intent(out) :: oldso4(f_chm_ni, nk)
   real,    intent(out) :: vocc(f_chm_ni*nk), vocr(f_chm_ni*nk), brch(f_chm_ni*nk)

!  declare other variables
   integer  :: i, k, npt, ii
   integer  :: istop, jstop
   real     :: cxma
!  number of gas-phase species
   integer, parameter ::  nst = 47
!  number of advected species - "dust" and "nh3" (i.e. advected species which are chemically active)
   integer, parameter ::  nsi = 28
!  nreac is number of reactions in the mechaf_chm_nim
   integer, parameter ::   nreac = 114
!  nprcf is number of variable product coefficients (function of t, etc.) used in the adom mechaf_chm_ni
   integer, parameter ::   nprcf = 30
   real :: bgs(nprcf), rgs(nreac), tppmgs(nst)
!  gas-phase species in ppmv units
   real tppmg(f_chm_ni * nk, nst)
!
   real *8 rga(f_chm_ni * nk, nreac)
   real *8 bg(f_chm_ni * nk, nprcf)
!  pressure (mb) at current slice of gridsquares
   real    zpres(f_chm_ni * nk)
!  conversion factor array to convert 1/kg air to (1/moles air).
!  = 0.08314 * t(kelvin) *rho(kg/m3) / p(mb) note that the constant includes conversion
   real conv1(f_chm_ni * nk)
!  solar zenith angle (time average)
   real zen(f_chm_ni * nk)
!  no concentration array.  used in hcho + ho2 reaction rate (no. 53)
   real cno(f_chm_ni * nk)
!  liquid water flag. if < 0, n2o5 +h2 reaction rate is reset to 5 x the gas-phase reaction rate.
!  currently set to -1 by defaul
   integer itswet(f_chm_ni * nk)

   
!
   real    ::  skyo(f_chm_ni, nk)
   integer :: index
   real    :: ymin, ymin2, ymin3
!  index remapping 2-d arrays to 1-d
   integer :: nn
!   "i_*" are pointer to "*" chemical species
   integer, parameter :: i_so2   = 1
   integer, parameter :: i_so4   = 2
   integer, parameter :: i_no    = 3
   integer, parameter :: i_no2   = 4
   integer, parameter :: i_o3    = 5
   integer, parameter :: i_h2o2  = 6
   integer, parameter :: i_hno3  = 7
   integer, parameter :: i_pan   = 8
   integer, parameter :: i_c3h8  = 9
   integer, parameter :: i_alka  = 10
   integer, parameter :: i_ethe  = 11
   integer, parameter :: i_alke  = 12
   integer, parameter :: i_tolu  = 13
   integer, parameter :: i_arom  = 14
   integer, parameter :: i_hcho  = 15
   integer, parameter :: i_ald2  = 16
   integer, parameter :: i_mek   = 17
   integer, parameter :: i_mgly  = 18
   integer, parameter :: i_dial  = 19
   integer, parameter :: i_rooh  = 20
   integer, parameter :: i_cres  = 21
   integer, parameter :: i_hono  = 22
   integer, parameter :: i_rno3  = 23
   integer, parameter :: i_isop  = 24
   integer, parameter :: i_ho2   = 25
   integer, parameter :: i_ro2   = 26
   integer, parameter :: i_mco3  = 27
   integer, parameter :: i_co    = 28
   integer, parameter :: i_nh3   = 29
   integer, parameter :: i_dust  = 30

   integer, parameter :: i_ch4   = 43
   integer, parameter :: i_c2h6  = 44

   integer :: ix, kz, nb

   logical local_dbg

   local_dbg = (.false. .or. global_debug)

!  number of gridpoints in one slice of data
   npt = f_chm_ni * nk

   if (local_dbg) then
      write(chm_lun_out, *) "in mach_gas_main consth, conva, rgm", consth, conva, rgm
   end if

!  Keep [SO4]g before gas chemistry for use in CAM
   do k = 1, nk
      do i = 1, f_chm_ni
         oldso4(i, k) = f_chmbusdyn(sm(sp_SO4) % dyn_offset + ik(i, k))
      end do
   end do

!  initialize various constants for the gas-phase mechanism and solver:
   call mach_gas_chemi(BG, npt, nprcf, nk, f_chm_ni)

!  determine the cloudy/clear sky correction factor for
!  photolysis rates:
! cosine of solar zenith angle is positive; sun is
! above the horizon.  calculate photolysis correction
! factor for clouds. (Sylvain note: Photolysis correction are compute on the full column height;
! this is the only subroutine in the gas chemistry where vertical loops are still done from
! (1, nk) and not from (nk_start, nk). It's a feature.

   call mach_gas_jcorr(cx, qc, gz_k, gz_chm, nu, rho, SKYO, f_chm_ni, nk)

   nn = (nk_start - 1) * f_chm_ni
   do k = nk_start, nk
      do i = 1, f_chm_ni
         nn = nn + 1
         zpres(nn)  = p2d(i, k)/100.  ! pa to mb
         conv1(nn)  = (rgm * tt(i, k) * rho(i, k)) / zpres(nn) ! rgm is gas constant * 0.01, used in conversion of ug/kg to ppmv
         zen(nn)    = acos(cx(i)) * conva ! conva is conversion factor from radians to degrees
         itswet(nn) = -1
!        Patch to avoid zero concentration for NO
         cno(nn) = max( 1.0e-12, f_chmbusdyn(sm(sp_NO) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_NO) % mol_wt)
      end do
   end do

!  Calculate reaction rate constants for current slice:
   call mach_gas_uprate(gz_chm, zpres, tt, skyo, &
         zen, itswet, cno, RGA, BG, nreac, nprcf, npt, f_chm_ni)
!
!  Transfer JNO2 to output array
!
   nn = 0
   do k = 1, nk
      do i = 1, f_chm_ni
         nn = nn + 1
         f_chmbusvol(sm(sp_JNO2) % out_offset + ik(i,k)) = rga(nn,1) / 60.
      end do
   end do 
         
!  Transfer chemicals and do gas-phase chemistry
   ymin  = real(yming)
   ymin2 = real(ymin2g)
   ymin3 = real(ymin3g)

   call tmg_start0 ( 24, 'mach_gas_drive')

! Some constant values
   tppmgs(i_ch4)  = ch4  ! constant concentration of methane as a function of height
   tppmgs(46) = o2       !  should relative amount of o2 change? upper atm?
   tppmgs(47) = aircon
   vocc = 0.0 
   vocr = 0.0
   brch = 0.0
   nn = (nk_start - 1) * f_chm_ni
   do k = nk_start, nk
      do i = 1, F_chm_ni
         nn = nn + 1

!    Convert units from mass mixing ratio to ppmv and place into
!  separate array for gas-phase chemical integration.  Note that
!  explicit referencing to specific locations in the master array
!  is used to maintain the correct species order expected by the
!  chemical integration subroutine ("drive").  P.A. Makar, Dec 30, 1998.

         tppmgs(i_so2)  = f_chmbusdyn(sm(sp_SO2 ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_SO2 ) % mol_wt
         tppmgs(i_so4)  = f_chmbusdyn(sm(sp_SO4 ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_SO4 ) % mol_wt
         tppmgs(i_no)   = f_chmbusdyn(sm(sp_NO  ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_NO  ) % mol_wt
         tppmgs(i_no2)  = f_chmbusdyn(sm(sp_NO2 ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_NO2 ) % mol_wt
         tppmgs(i_o3)   = f_chmbusdyn(sm(sp_O3  ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_O3  ) % mol_wt
         tppmgs(i_h2o2) = f_chmbusdyn(sm(sp_H2O2) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_H2O2) % mol_wt
         tppmgs(i_hno3) = f_chmbusdyn(sm(sp_HNO3) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_HNO3) % mol_wt
         tppmgs(i_pan)  = f_chmbusdyn(sm(sp_PAN ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_PAN ) % mol_wt
         tppmgs(i_c3h8) = f_chmbusdyn(sm(sp_C3H8) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_C3H8) % mol_wt
         tppmgs(i_alka) = f_chmbusdyn(sm(sp_ALKA) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_ALKA) % mol_wt

         tppmgs(i_ethe) = f_chmbusdyn(sm(sp_ETHE) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_ETHE) % mol_wt
         tppmgs(i_alke) = f_chmbusdyn(sm(sp_ALKE) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_ALKE) % mol_wt
         tppmgs(i_tolu) = f_chmbusdyn(sm(sp_TOLU) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_TOLU) % mol_wt
         tppmgs(i_arom) = f_chmbusdyn(sm(sp_AROM) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_AROM) % mol_wt
         tppmgs(i_hcho) = f_chmbusdyn(sm(sp_HCHO) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_HCHO) % mol_wt
         tppmgs(i_ald2) = f_chmbusdyn(sm(sp_ALD2) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_ALD2) % mol_wt
         tppmgs(i_mek)  = f_chmbusdyn(sm(sp_MEK ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_MEK ) % mol_wt
         tppmgs(i_mgly) = f_chmbusdyn(sm(sp_MGLY) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_MGLY) % mol_wt
         tppmgs(i_dial) = f_chmbusdyn(sm(sp_DIAL) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_DIAL) % mol_wt
         tppmgs(i_rooh) = f_chmbusdyn(sm(sp_ROOH) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_ROOH) % mol_wt

         tppmgs(i_cres) = f_chmbusdyn(sm(sp_CRES) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_CRES) % mol_wt
         tppmgs(i_hono) = f_chmbusdyn(sm(sp_HONO) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_HONO) % mol_wt
         tppmgs(i_rno3) = f_chmbusdyn(sm(sp_RNO3) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_RNO3) % mol_wt
         tppmgs(i_isop) = f_chmbusdyn(sm(sp_ISOP) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_ISOP) % mol_wt
         tppmgs(i_ho2)  = f_chmbusdyn(sm(sp_HO2 ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_HO2 ) % mol_wt
         tppmgs(i_ro2)  = f_chmbusdyn(sm(sp_RO2 ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_RO2 ) % mol_wt
         tppmgs(i_mco3) = f_chmbusdyn(sm(sp_MCO3) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_MCO3) % mol_wt
         tppmgs(i_co)   = f_chmbusdyn(sm(sp_CO  ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_CO  ) % mol_wt
         tppmgs(i_nh3)  = f_chmbusdyn(sm(sp_NH3 ) % dyn_offset + ik(i, k)) * conv1(nn) / sm(sp_NH3 ) % mol_wt
         tppmgs(i_dust) = 1.0 ! "dust" is not used in the gas-phase chemistry
!  factor of 0.001:  these values are returned to the main code
!  as ppbv for consistency with the output units of the transported variables.
!  here, they are converted back to the ppmv units required by "drive".
!  constant species were reset in the previous loop to ppmv values, so no
!  need to multiply the master array values by 0.001.

         tppmgs(31)     = f_chmbusdyn(sm(sp_OSD ) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(32)     = f_chmbusdyn(sm(sp_O   ) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(33)     = f_chmbusdyn(sm(sp_NO3 ) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(34)     = f_chmbusdyn(sm(sp_N2O5) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(35)     = f_chmbusdyn(sm(sp_HNO4) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(36)     = f_chmbusdyn(sm(sp_OH  ) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(37)     = f_chmbusdyn(sm(sp_RO2R) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(38)     = f_chmbusdyn(sm(sp_R2O2) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(39)     = f_chmbusdyn(sm(sp_RO2N) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(40)     = f_chmbusdyn(sm(sp_BZO ) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(41)     = f_chmbusdyn(sm(sp_CRG1) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(42)     = f_chmbusdyn(sm(sp_CRG2) % dyn_offset + ik(i, k)) * 0.001
         tppmgs(i_c2h6) = c2h6(k) ! constant concentration of ethane  as a function of height.


!  determine value of water vapour from the meteorology:
!     "consth" is a constant for
!            (a) converting humidity variable to ppmv, and
!            (b) taking the average of the met value to determine the value for the given time step.  for humidity in
!                kg(h2o)/kg(air) to ppmv, the conversion is * 1.e+06/(m(h2o)/m(air)); 28.96 used for molecular mass of air,
!                18.015 for molecular mass of h2o
         tppmgs(45) = consth *  max(1.0e-03, hu(i, k))
         do ii=1, nreac
            rgs(ii)   = real(rga(nn, ii))
         end do

         do ii=1, nprcf
            bgs(ii)   = real(bg(nn, ii))
         end do

!  set up for gas-phase solver, called in scalar mode
         if (f_step > 1) then
!  for "initialization" steps, use the high accuracy, small
!  internal time step option in the solver (index = 1)
            index = 0
         else
            index = 1
         end if

!  call solver for current grid-point's gas-phase chemistry:
         istop = 0
         jstop = 0
         if (local_dbg) then
            do ii=1, nst
               if(tppmgs(ii) <= 0.0) then
                  write (chm_lun_out, *) 'initial concentration less than or equal to zero for species ', ii, tppmgs(ii)
               end if
            end do
            do ii = 1, nreac
               if(rgs(ii) <= 0.0) then
                  write (chm_lun_out, *) 'zero rate constant found for reaction ', ii
               end if
            end do
         end if

         call mach_gas_drive(TPPMGS, nst, nsi, chm_timestep, INDEX,           &
                                  zen(nn), i, k, rgs, bgs, nreac, nprcf,           &
                                  ymin, ymin2, ymin3, hstart, hsub, hmax)
         if (index < 0) then
            write(0,*) '### Error in mach_gas_main ###'
            write(0,*) '# Return code from mach_gas_drive: ', index
            select case(index)
               case(-1)
                  write(0,*) '# Integration failed'
               case(-10)
                  write(0,*) '# Integration took too many steps'
               case(-20, -21, -22)
                  write(0,*) '# Integration aborted because it was about'
                  write(0,*) '# to make a division by zero'
            end select
            write(0,*) '###          ABORT         ###'
            call chm_stop('mach_gas_main (mach_gas_drive)', index)
         end if
         do ii=1, nst
               tppmg(nn, ii) = tppmgs(ii)
         end do
! total voc in ppbv:
         vocc(nn) = 1.E3 * ( &
                  + tppmgs(i_c3h8) &
                  + tppmgs(i_alka) &
                  + tppmgs(i_ethe) &
                  + tppmgs(i_alke) &
                  + tppmgs(i_tolu) &
                  + tppmgs(i_arom) &
                  + tppmgs(i_hcho) &
                  + tppmgs(i_ald2) &
                  + tppmgs(i_mek) &
                  + tppmgs(i_mgly) &
                  + tppmgs(i_dial) &
                  + tppmgs(i_rooh) &
                  + tppmgs(i_cres) &
                  + tppmgs(i_isop) &
                  + tppmgs(i_c2h6) &
                  + tppmgs(i_ch4) &
                  + tppmgs(i_pan) &
                  + tppmgs(i_rno3))
! Total VOC reactivity in s-1:
         vocr(nn) = 1./60. * ( &
                  + tppmgs(i_c3h8) *rgs(69) &
                  + tppmgs(i_alka) *rgs(70) &
                  + tppmgs(i_ethe) *rgs(84) &
                  + tppmgs(i_alke) *rgs(88) &
                  + tppmgs(i_tolu) *rgs(100) &
                  + tppmgs(i_arom) *rgs(101) &
                  + tppmgs(i_hcho) *rgs(51) &
                  + tppmgs(i_ald2) *rgs(54) &
                  + tppmgs(i_mek)  *rgs(63) &
                  + tppmgs(i_mgly) *rgs(65) &
                  + tppmgs(i_dial) *rgs(102) &
                  + tppmgs(i_rooh) *rgs(114) &
                  + tppmgs(i_cres) *rgs(104) &
                  + tppmgs(i_isop) *rgs(109) &
                  + tppmgs(i_c2h6) *rgs(68) &
                  + tppmgs(i_ch4)  *rgs(67) &
!                  + tppmgs(i_pan)  *rgs() & ! PAN OH rate slow, not in ADOM2
                  + tppmgs(i_rno3) *rgs(71) )
         brch(nn) = ( (rgs(76)+rgs(80)) * tppmgs(i_no)) / &
                  max(( (rgs(76)+rgs(80)) * tppmgs(i_no) + &
                    (rgs(77)+rgs(81)) * tppmgs(i_ho2) + &
                    (rgs(78)+rgs(82)) * tppmgs(i_ro2) ), 1.E-20)

      end do
   end do

   call tmg_stop0 ( 24 )

  if (chm_soa_s /= 'NIL') then
! Calculate the change in concentration of soa using ODUM or JIANG et al. yield approaches
      call mach_gas_soa_yield(F_CHMBUSDYN, f_chmbusvol, p2d,    tt,     rho,    tppmg, conv1, nst, &
                              f_chm_ni, nk)
  end if

!  gas species:  convert units back to ug/kg and ppbv,  and place back into buses:
   nn = (nk_start - 1) * f_chm_ni
   do k = nk_start, nk
      do i = 1, f_chm_ni
         nn = nn + 1

         f_chmbusdyn(sm(sp_SO2 ) % dyn_offset + ik(i, k)) = tppmg(nn , i_so2)  / conv1(nn) * sm(sp_SO2 ) % mol_wt
         f_chmbusdyn(sm(sp_SO4 ) % dyn_offset + ik(i, k)) = tppmg(nn , i_so4)  / conv1(nn) * sm(sp_SO4 ) % mol_wt
         f_chmbusdyn(sm(sp_NO  ) % dyn_offset + ik(i, k)) = tppmg(nn , i_no)   / conv1(nn) * sm(sp_NO  ) % mol_wt
         f_chmbusdyn(sm(sp_NO2 ) % dyn_offset + ik(i, k)) = tppmg(nn , i_no2)  / conv1(nn) * sm(sp_NO2 ) % mol_wt
         f_chmbusdyn(sm(sp_O3  ) % dyn_offset + ik(i, k)) = tppmg(nn , i_o3)   / conv1(nn) * sm(sp_O3  ) % mol_wt
         f_chmbusdyn(sm(sp_H2O2) % dyn_offset + ik(i, k)) = tppmg(nn , i_h2o2) / conv1(nn) * sm(sp_H2O2) % mol_wt
         f_chmbusdyn(sm(sp_HNO3) % dyn_offset + ik(i, k)) = tppmg(nn , i_hno3) / conv1(nn) * sm(sp_HNO3) % mol_wt
         f_chmbusdyn(sm(sp_PAN ) % dyn_offset + ik(i, k)) = tppmg(nn , i_pan)  / conv1(nn) * sm(sp_PAN ) % mol_wt
         f_chmbusdyn(sm(sp_C3H8) % dyn_offset + ik(i, k)) = tppmg(nn , i_c3h8) / conv1(nn) * sm(sp_C3H8) % mol_wt
         f_chmbusdyn(sm(sp_ALKA) % dyn_offset + ik(i, k)) = tppmg(nn , i_alka) / conv1(nn) * sm(sp_ALKA) % mol_wt
         f_chmbusdyn(sm(sp_ETHE) % dyn_offset + ik(i, k)) = tppmg(nn , i_ethe) / conv1(nn) * sm(sp_ETHE) % mol_wt
         f_chmbusdyn(sm(sp_ALKE) % dyn_offset + ik(i, k)) = tppmg(nn , i_alke) / conv1(nn) * sm(sp_ALKE) % mol_wt
         f_chmbusdyn(sm(sp_TOLU) % dyn_offset + ik(i, k)) = tppmg(nn , i_tolu) / conv1(nn) * sm(sp_TOLU) % mol_wt
         f_chmbusdyn(sm(sp_AROM) % dyn_offset + ik(i, k)) = tppmg(nn , i_arom) / conv1(nn) * sm(sp_AROM) % mol_wt
         f_chmbusdyn(sm(sp_HCHO) % dyn_offset + ik(i, k)) = tppmg(nn , i_hcho) / conv1(nn) * sm(sp_HCHO) % mol_wt
         f_chmbusdyn(sm(sp_ALD2) % dyn_offset + ik(i, k)) = tppmg(nn , i_ald2) / conv1(nn) * sm(sp_ALD2) % mol_wt
         f_chmbusdyn(sm(sp_MEK ) % dyn_offset + ik(i, k)) = tppmg(nn , i_mek)  / conv1(nn) * sm(sp_MEK ) % mol_wt
         f_chmbusdyn(sm(sp_MGLY) % dyn_offset + ik(i, k)) = tppmg(nn , i_mgly) / conv1(nn) * sm(sp_MGLY) % mol_wt
         f_chmbusdyn(sm(sp_DIAL) % dyn_offset + ik(i, k)) = tppmg(nn , i_dial) / conv1(nn) * sm(sp_DIAL) % mol_wt
         f_chmbusdyn(sm(sp_ROOH) % dyn_offset + ik(i, k)) = tppmg(nn , i_rooh) / conv1(nn) * sm(sp_ROOH) % mol_wt
         f_chmbusdyn(sm(sp_CRES) % dyn_offset + ik(i, k)) = tppmg(nn , i_cres) / conv1(nn) * sm(sp_CRES) % mol_wt
         f_chmbusdyn(sm(sp_HONO) % dyn_offset + ik(i, k)) = tppmg(nn , i_hono) / conv1(nn) * sm(sp_HONO) % mol_wt
         f_chmbusdyn(sm(sp_RNO3) % dyn_offset + ik(i, k)) = tppmg(nn , i_rno3) / conv1(nn) * sm(sp_RNO3) % mol_wt
         f_chmbusdyn(sm(sp_ISOP) % dyn_offset + ik(i, k)) = tppmg(nn , i_isop) / conv1(nn) * sm(sp_ISOP) % mol_wt
         f_chmbusdyn(sm(sp_HO2 ) % dyn_offset + ik(i, k)) = tppmg(nn , i_ho2)  / conv1(nn) * sm(sp_HO2 ) % mol_wt
         f_chmbusdyn(sm(sp_RO2 ) % dyn_offset + ik(i, k)) = tppmg(nn , i_ro2)  / conv1(nn) * sm(sp_RO2 ) % mol_wt
         f_chmbusdyn(sm(sp_MCO3) % dyn_offset + ik(i, k)) = tppmg(nn , i_mco3) / conv1(nn) * sm(sp_MCO3) % mol_wt
         f_chmbusdyn(sm(sp_CO  ) % dyn_offset + ik(i, k)) = tppmg(nn , i_co)   / conv1(nn) * sm(sp_CO  ) % mol_wt
         f_chmbusdyn(sm(sp_NH3 ) % dyn_offset + ik(i, k)) = tppmg(nn , i_nh3)  / conv1(nn) * sm(sp_NH3 ) % mol_wt

         f_chmbusdyn(sm(sp_OSD ) % dyn_offset + ik(i, k)) = tppmg(nn , 31) / 0.001
         f_chmbusdyn(sm(sp_O   ) % dyn_offset + ik(i, k)) = tppmg(nn , 32) / 0.001
         f_chmbusdyn(sm(sp_NO3 ) % dyn_offset + ik(i, k)) = tppmg(nn , 33) / 0.001
         f_chmbusdyn(sm(sp_N2O5) % dyn_offset + ik(i, k)) = tppmg(nn , 34) / 0.001
         f_chmbusdyn(sm(sp_HNO4) % dyn_offset + ik(i, k)) = tppmg(nn , 35) / 0.001
         f_chmbusdyn(sm(sp_OH  ) % dyn_offset + ik(i, k)) = tppmg(nn , 36) / 0.001
         f_chmbusdyn(sm(sp_RO2R) % dyn_offset + ik(i, k)) = tppmg(nn , 37) / 0.001
         f_chmbusdyn(sm(sp_R2O2) % dyn_offset + ik(i, k)) = tppmg(nn , 38) / 0.001
         f_chmbusdyn(sm(sp_RO2N) % dyn_offset + ik(i, k)) = tppmg(nn , 39) / 0.001
         f_chmbusdyn(sm(sp_BZO ) % dyn_offset + ik(i, k)) = tppmg(nn , 40) / 0.001
         f_chmbusdyn(sm(sp_CRG1) % dyn_offset + ik(i, k)) = tppmg(nn , 41) / 0.001
         f_chmbusdyn(sm(sp_CRG2) % dyn_offset + ik(i, k)) = tppmg(nn , 42) / 0.001

      end do
   end do

   contains
      integer function ik(ix, kz)
         implicit none
         integer, intent(in) :: ix, kz
         ik = (kz - 1) * f_chm_ni + (ix - 1)
      end function ik

end
