!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
!  Modification:  This version expects only particle mass as input,
!                 and is called from an outer routine that subdivides
!                 the particle bins to achieve higher accuracy within
!                 this stage.  P.A. Makar, W. Gong, S. Gong, Feb 2008
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_cam_intrsec.ftn90
! Creation       : S. Gong, S. Gravel and B. Pabla for GEM-MACH, June 2008
!
! Description    : This module computes intersectional transport of aerosols
!                  due to comdensation or cloud processes
!
! Extra info     : First version created by S. Gong Aug 11 1997 for CAM
!
! Arguments:  IN
!               ilev     -> no. z-direct. vertical levels
!               lev      -> ilev+1
!               F_chm_ni -> number of longitude grid points
!               il1      -> minimum index for F_chm_ni
!               il2      -> maximum index for F_chm_ni
!               rtcond   -> Mass transfer rate onto each particle size bin
!               totmas   -> Total mass of aerosol in each bin
!               ntr      -> Total number of trace substances (gases and aerosols)
!               ntp      -> Number of aerosol types
!               nn       -> Loop index on aerosol types
!               adt2     -> Advection time step (s)
!               rhop0    -> dry aerosol density [ug/m^3]
!               isize    -> Number of size bins
!              rtcond    -> Mass transfer rate onto each particle size bin
!               aeronum  -> Number concentration of aerosols
!                  v     ->
!                  mae   -> 0
!
!             IN/OUT
!              XROW      -> Particle tracer concentration in each bin before/after intersection tranport
!
!============================================================================

   subroutine mach_cam_intrsec_inner (lev, ilev, F_chm_ni, il1, il2, XROW, ntr, ntp, &
                                nn, adt2, rhop0, isize, rtcond, aeronum, v, mae)
   use chm_consphychm_mod
   implicit none

   integer, intent(in) :: lev, ilev, F_chm_ni, ntr, ntp, isize
   integer, intent(in) :: il1, il2, nn, mae
   real,    intent(in) :: adt2
   real,    intent(in),    dimension(F_chm_ni, ilev, isize) :: aeronum, rtcond
   real,    intent(in),    dimension(isize)            :: v
   real,    intent(in),    dimension(ntp)              :: rhop0
   real,    intent(inout), dimension(F_chm_ni, lev, ntr)    :: xrow

!  local variables
   integer                            :: k, np, ik, l, il, n, i, nt, no, nk, k0
   real                               :: rcond, voij, vok, vokm1, vokp1
   real, dimension(F_chm_ni, ilev, isize)  :: rth
   real, dimension(F_chm_ni, ilev, ntr)    :: rgrid
!
   rcond = 0.0
   rth   = 0.0
   voij  = 0.0
   vok   = 0.0
   vokm1 = 0.0
   vokp1 = 0.0

   do k = 1, isize
      do np = 1, ntp
      ik = (np - 1) * isize + k
         do l = 1 + mae, ilev
            do il = il1, il2
               rgrid(il, l, ik) = xrow(il, l + 1, ik)
            end do
         end do
      end do
   end do

!  condensation rate
   do n = 1, isize
      rth = 0.0
      do k = n, isize
         do l = 1 + mae, ilev
            do i = il1, il2
               rcond = rtcond(i, l, n)

!  new dry volume of size bin n
               voij = v(n) + rcond * adt2 / (aeronum(i, l, n) * rhop0(nn))
               vok = v(k)
               if (k == isize .and. voij >= vok) then
                  rth(i, l, k) = 1.0
               end if
               if (k < isize) then
                  k0 = min( k+1, isize )
                  vokp1 = v(k0)
                  if ( voij >= vok .and. voij < vokp1 ) then
                     rth(i, l, k) = vok / voij * (vokp1 - voij) / (vokp1 - vok)
                  endif
               end if
               if (k > 1) then
                  k0 = max( 1, k-1 )
                  vokm1 = v(k0)
                  if ( voij > vokm1 .and. voij < vok ) then
                     rth(i, l, k) = 1.0 - rth(i, l, k0)
                  endif
               end if
            end do
         end do
         do nt = 1, ntp
            no = n + isize * (nt - 1)
            nk = k + isize * (nt - 1)
            do l = 1 + mae, ilev
               do i = il1, il2
                  if (rth(i, l, k) > 0.0) then
!  zero bin n for re-distribution
                     if (n == k) then
                        xrow(i, l + 1, no) = max(0.0, xrow(i, l + 1, no) - rgrid(i, l, no))
                     end if
!  distributed into bin k
                     xrow(i, l + 1, nk) = xrow(i, l + 1, nk) + rgrid(i, l, no) * rth(i, l, k)
                     if (nt == nn) then
                        xrow(i, l + 1, nk) = xrow(i, l + 1, nk) + rth(i, l, k) * rtcond(i, l, n) * adt2
                     end if
                  end if
               end do
            end do
         end do
      end do
   end do

   return
end
