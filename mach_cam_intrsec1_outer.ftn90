!  This subroutine subdivides the original input bin structure
!  into sub-bins, in order to reduce linear interpolation dispersion
!  and bin resolution problems during the transfer of mass between bins
!  accompanying bin growth.   The routine calls mach_cam_intrsec1.ftn90
!  to do the actual mass transfer between sub-bins.
!
!  6 options are possible, making use of the user input
!  variable "chm_intrsec_ver" on the call list.  The code
!  splits the input particle mass, according to the version number,
!  calculates the corresponding aerosol number in each bin,
!  and then splits the condensation rate by version number.
!
!  The options (chm_intrsec_ver = ) are:
!   1, 2 = mass and delta-mass evenly distributed over sub-bins by radius '
!
!   2, 3 = mass and delta-mass evenly distributed over sub-bins by ln radius'
!
!   3, 6 = mass and delta-mass distributed according to locally scaled trimodal lognormal distribution'
!
!
!  The algorithm is similar to mach_cam_intrsec_outer; the main difference
!  is that here, the input xrow contains the aerosol mass distribution
!  after mass has been added due to aqueous phase or inorganic heterogeneous
!  chemistry processes, the total amount of mass added being daqshem.
!  both xrow and daqchem are split using the same choice of algorithms.
!  The 6 version numbers are to provide continuity and a similar method
!  of mass splitting as mach_cam_intrsec_outer, which also has 2 options
!  for redistributing the aerosol condensation rate.  The latter is unnecessary
!  here, but the version numbers are preserved so that the same method
!  for mass splitting is used in both routines.
!
!  P.A. Makar, W. Gong, S. Gong, February 2009
!
! Arguments:  IN
!               ilev     -> no. z-direct. vertical levels
!               lev      -> ilev + 1
!               F_chm_ni -> number of longitude grid points
!               il1      -> minimum index for F_chm_ni
!               il2      -> maximum index for F_chm_ni
!               totmas   -> Total mass of aerosol in each bin
!               ntr      -> Total number of trace substances (gases and aerosols)
!               ntp      -> Number of aerosol types
!               iae1     -> Index of first aerosol in trace substance list (ntr)
!               nn       -> Loop index on aerosol types
!               rhopd    -> dry aerosol density [ug / m^3]
!               isize    -> Number of size bins
!               aeronum  -> Number concentration of aerosols
!               aeronum_n-> Number concentration of aerosols in sub bins
!                  v     ->
!               xrow_n   -> Tracer concentration with sub-bins for the particles
!               q_bin    -> liquid water content in each size bin; needed for
!                           distributing daqchm in the call following
!                           mach_incld_main.ftn90
!               rcrit    -> critical radius expressed in real bin index
!                           (including fraction)
!               iswitch  -> 1 for the call following mach_incld_main
!                           0 otherwise
!
!             IN / OUT
!              XROW      -> Tracer concentration in each bin before / after intersection tranport
!
! == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==  ==

   subroutine mach_cam_intrsec1_outer (lev, ilev, F_chm_ni, il1, il2, XROW, ntr, ntp, iae1, &
        isize, rhopd, daqchm, aerosize, q_bin, rcrit, iswitch)
   use chm_consphychm_mod
   use chm_nml_mod, only: chm_intrsec_ver, chm_intrsec_ndiv
   use mach_cam_headers_mod, only: mach_cam_intrsec1_inner
   implicit none

   integer, intent(in) :: lev, ilev, F_chm_ni, ntr, ntp, isize
   integer, intent(in) :: il1, il2, iae1, iswitch
   real,    intent(in),    dimension(F_chm_ni, ilev, isize) :: daqchm
   real,    intent(in),    dimension(F_chm_ni, ilev, isize) :: rhopd
   real,    intent(in),    dimension(F_chm_ni, ilev, isize) :: q_bin
   real,    intent(in),    dimension(F_chm_ni, ilev)        :: rcrit
   real,    intent(in),    dimension(2, isize)              :: aerosize
   real,    intent(inout), dimension(F_chm_ni, lev, ntr)    :: xrow
!  local variables
   integer                            :: k, np, ik, l, il, n, i, nt, no, nk, k0
!  New variables:
   real,  dimension(isize)                :: v
   real , allocatable, dimension(:, :, :) :: aeronum_n, daqchm_n, rmass_n
   real , allocatable, dimension(:, :, :) :: xrow_n
   real , allocatable, dimension(:, :, :) :: q_bin_n
   real , allocatable, dimension(:, :)    :: rn
   real , allocatable, dimension(:)       :: v_n, r_n, dvn, a_n
   real , dimension(isize)                :: ri, a
   real :: rndiv, dNdr, dMdrdt, dr_orig, dr_new,  dMdr, sqrt2pi
   real :: dp1, dm1, dnp1_dlogd, dnm1_dlogd, dvp1_dlogd, dvm1_dlogd, vsum, suma
   real :: w, adv, net_vol
   real :: aeronum_t, aeronum_t1, aeronum_t2, aeronum_tsub, dlt
   integer :: j, jsub, jk
   integer :: nbnd, ntr_n
!
   real, parameter :: smf = 1e-32
!
! Parameters for trimodal distribution:
   real, dimension(3)                      :: nnn, dpm, lsig
!
!  Parameters for assumed particle size distribution (Seinfeld and Pandis, 2006,
!  after Jaenicke, 1993, urban aerosol distribution):
!
     data nnn / 9.93E4, 1.11E3, 3.64E4  /
     data dpm / 0.013, 0.014, 0.050  /
     data lsig / 0.245, 0.666, 0.337  /
!
! -------------------------------------------------------------

   nbnd = isize * chm_intrsec_ndiv
   ntr_n = ntp * nbnd
   allocate(aeronum_n(F_chm_ni, ilev, nbnd))
   allocate(daqchm_n(F_chm_ni, ilev, nbnd))
   allocate(rmass_n(F_chm_ni, ilev, nbnd))
   allocate(xrow_n(F_chm_ni, lev, ntr_n))
   allocate(v_n(nbnd))
   allocate(r_n(nbnd))
   allocate(dvn(nbnd))
   allocate(a_n(nbnd))
   allocate(rn(2, nbnd))

   sqrt2pi = sqrt(2.0 * acos( - 1.0))
!
!  Commence subdivision of original bins:
!
   rndiv = real(chm_intrsec_ndiv)
!
!  Use aerosize to determine bin centers and center radii:
   do i = 1, isize
      ri(i) = (aerosize(1, i) + aerosize(2, i)) * .5
      a(i) = 4.0 * acos( - 1.0) * ri(i)**2
      v(i) = a(i) / 3.0 * ri(i)
   end do
!
!  Determine bin boundaries of the subdivided distribution:
!
   rn =  0.0
!
   if (chm_intrsec_ver == 1 .or. chm_intrsec_ver == 4) then
      do i = 1, isize
         do j = 1, chm_intrsec_ndiv
            rn(1, (i - 1) * chm_intrsec_ndiv + j) = aerosize(1, i) + float(j - 1) * (aerosize(2, i)-aerosize(1, i)) / rndiv
         end do
      end do
   else if(chm_intrsec_ver == 2 .or. chm_intrsec_ver == 3 .or. chm_intrsec_ver == 5 .or. chm_intrsec_ver == 6) then
      do i = 1, isize
         do j = 1, chm_intrsec_ndiv
            rn(1, (i - 1) * chm_intrsec_ndiv + j) = exp(alog(aerosize(1, i)) + float(j - 1) * (alog(aerosize(2, i))-alog(aerosize(1, i))) / rndiv)
         end do
      end do
   end if
!
   do i = 2, nbnd
      rn(2, i - 1) = rn(1, i)
   end do
   rn(2, nbnd) = aerosize(2, isize)
   do i = 1, nbnd
      r_n(i) = (rn(1, i) + rn(2, i)) * 0.5
      a_n(i) = 4.0 * acos( - 1.0) * r_n(i)**2
      v_n(i) = a_n(i) * r_n(i) / 3.0
   end do
!
!  Particle density is assumed to be the same within the sub-bin
!  as within the original bin:
!
   do k = 1, isize
      do j = 1, chm_intrsec_ndiv
      jk = (k - 1) * chm_intrsec_ndiv + j
         do il = 1, ilev
            do i = il1, il2
               rmass_n(i, il, jk) = v_n(jk) * rhopd(i, il, k)
            end do
         end do
      end do
   end do
!
   xrow_n = 0.
   daqchm_n = 0.
!
   if(chm_intrsec_ver == 1 .or. chm_intrsec_ver == 4) then
!  version 1 of possible distribution of aeronum, xrow:
!  Use delta(quantity) / delta(radius) and the leftmost boundary value of
!  the quantity being zero to divide up quantities:
!
!  Assign particle mass:
!
      do k = 1, isize
         dr_orig = (aerosize(2, k) - aerosize(1, k))
         do np = 1, ntp
            ik = (np - 1) * isize + k + iae1 - 1
            do il = 1, ilev
               do i = il1, il2
                  dMdr   = xrow(i, il + 1, ik) / dr_orig
                  do j = 1, chm_intrsec_ndiv
                     jsub = (k - 1) * chm_intrsec_ndiv + j
                     jk = (np - 1) * nbnd + jsub
                     dr_new = rn(2, jsub) - rn(1, jsub)
                     xrow_n(i, il + 1, jk) = dMdr * dr_new
                  end do
               end do
            end do
         end do
      end do
! Net particle mass change, same methodology:
      do k = 1, isize
         dr_orig = (aerosize(2, k) - aerosize(1, k))
         do il = 1, ilev
            do i = il1, il2
               dMdr   = daqchm(i, il, k) / dr_orig
               do j = 1, chm_intrsec_ndiv
                  jsub = (k - 1) * chm_intrsec_ndiv + j
                  dr_new = rn(2, jsub) - rn(1, jsub)
                  daqchm_n(i, il, jsub) = dMdr * dr_new
               end do
            end do
         end do
      end do
  else if(chm_intrsec_ver == 2 .or. chm_intrsec_ver == 5) then
!  version 2 of possible distribution of aeronum, xrow:
!  Use delta(quantity) / delta(ln radius) and the leftmost boundary value of
!  the quantity being zero to divide up quantities:
!
!  Assign particle mass:
!
      do k = 1, isize
         dr_orig = alog(aerosize(2, k) / aerosize(1, k))
         do np = 1, ntp
            ik = (np - 1) * isize + k + iae1 - 1
            do il = 1, ilev
               do i = il1, il2
                  dMdr   = xrow(i, il + 1, ik) / dr_orig
                  do j = 1, chm_intrsec_ndiv
                     jsub = (k - 1) * chm_intrsec_ndiv + j
                     jk = (np - 1) * isize * chm_intrsec_ndiv + jsub
                     dr_new = alog(rn(2, jsub) / rn(1, jsub))
                     xrow_n(i, il + 1, jk) = dMdr * dr_new
                  end do
               end do
            end do
         end do
      end do
! Particle change in mass, same methodology:
      do k = 1, isize
         dr_orig = alog(aerosize(2, k) / aerosize(1, k))
         do il = 1, ilev
            do i = il1, il2
               dMdr   = daqchm(i, il, k) / dr_orig
               do j = 1, chm_intrsec_ndiv
                  jsub = (k - 1) * chm_intrsec_ndiv + j
                  dr_new = alog(rn(2, jsub) / rn(1, jsub))
                  daqchm_n(i, il, jk) = dMdr * dr_new
               end do
            end do
         end do
      end do
  else if(chm_intrsec_ver == 3 .or. chm_intrsec_ver == 6) then
!
!  xrow is redistributed according to urban volume distribution
!  of Jaenicke, 1993, quoted in Seinfeld and Pandis 2006 pages 370-371.
!  Use delta(quantity) / delta(ln radius) and the leftmost boundary value of
!  the quantity being zero to divide up quantities:
!
!  Assign particle mass:
!
!  First, define particle number and volume distribution according
!  to Jaenicke, 1993:
!
      do i = 1, nbnd
         dp1 = rn(2, i) * 2. * 1.E6  ! diameter in um
         dm1 = rn(1, i) * 2. * 1.E6  ! diameter in um
         dnp1_dlogd = 0.
         dnm1_dlogd = 0.
! construct trimodal dN / dlogD value at boundary radii of sub-bin:
         do j = 1, 3
            dnp1_dlogd = dnp1_dlogd + nnn(j) / (sqrt2pi * lsig(j)) &
                        * exp( - 1.0 * (alog10(dp1)-alog10(dpm(j)))**2 &
                        / (2. * lsig(j)**2) )
            dnm1_dlogd = dnm1_dlogd + nnn(j) / (sqrt2pi * lsig(j)) &
                        * exp( - 1.0 * (alog10(dm1)-alog10(dpm(j)))**2 &
                        / (2. * lsig(j)**2) )
         end do
! construct corresponding dV / dlogD value at boundary radii of sub-bin:
         dvp1_dlogd = dnp1_dlogd * 4.0 / 3.0 * acos( - 1.) * (dp1 * .5)**3
         dvm1_dlogd = dnm1_dlogd * 4.0 / 3.0 * acos( - 1.) * (dm1 * .5)**3
! integrate between these values :  volume = area under curve. Rectangle rule used:
         dvn(i) = (dvp1_dlogd + dvm1_dlogd) * (alog10(dp1)-alog10(dm1))
      end do
!!
!  The dvn array contains a "typical urban" trimodal volume (i.e. mass) distribution.
!  The sub-bin boundaries rn(2, i) to rn(1, i) have been constructed to fall within the
!  original bin boundaries.  The next step determines scaling factors to use
!  within the bin, based on the relative amount of sub-bin volume within the bin:
      do k = 1, isize
         vsum = 0.
         do j = 1, chm_intrsec_ndiv
            jsub = (k - 1) * chm_intrsec_ndiv + j
            vsum = vsum + dvn(jsub)
         end do
         do j = 1, chm_intrsec_ndiv
            jsub = (k - 1) * chm_intrsec_ndiv + j
            dvn(jsub) = dvn(jsub) / vsum
         end do
      end do
!
!  At this point, the array dvn contains scaling factors
!  that can be used to redistribute the bin mass to
!  sub-bins.  Within the bin, the trimodal distribution
!  will be used, but discontinuities may occur at the
!  sub-bin borders.
!
!
      do k = 1, isize
         do np = 1, ntp
            ik = (np - 1) * isize + k + iae1 - 1
            do il = 1, ilev
               do i = il1, il2
                  do j = 1, chm_intrsec_ndiv
                     jsub = (k - 1) * chm_intrsec_ndiv + j
                     jk = (np - 1) * isize * chm_intrsec_ndiv + jsub
                     xrow_n(i, il + 1, jk) = xrow(i, il + 1, ik) * dvn(jsub)
                  end do
               end do
            end do
         end do
      end do
!
!  Ditto, change in particle mass:
!
      do k = 1, isize
         do il = 1, ilev
            do i = il1, il2
               do j = 1, chm_intrsec_ndiv
                  jsub = (k - 1) * chm_intrsec_ndiv + j
                  daqchm_n(i, il, jsub) = daqchm_n(i, il, k) * dvn(jsub)
               end do
            end do
         end do
      end do
!
   end if

!
!  Assign new particle number based on individual particle volume, density,
!  and mass values.
     aeronum_n = 0.
     do k = 1,isize
      do j = 1, chm_intrsec_ndiv
       jsub = (k-1)*chm_intrsec_ndiv + j
      do il = 1, ilev
         do i = il1, il2
            net_vol = 0.
            do np = 1, ntp
           jk = (np - 1)* nbnd + jsub
               net_vol = net_vol + xrow_n(i, il + 1, jk) / rhopd(i, il, k)
            end do
         aeronum_n(i,il,jsub)  = net_vol/v_n(jsub)
       end do
         end do
      end do
   end do
!
!  Distributing bulk paritcle mass change to sub-bins for the call after
!  in-cloud chemistry (weighted by liquid water content in sun-bins which is
!  obtained by distributing q_bin equally amongst activated particles in sub-
!  divided bins) - W. Gong
!
    if(iswitch == 1) then
!
      allocate(q_bin_n(F_chm_ni, ilev, nbnd))
      q_bin_n = 0.0
      daqchm_n = 0.0
!
!   q_bin contains the liquid water content in each bin before subdivision
!   which is being distributed to activated sub-bins to obtain q_bin_n in
!   the following. Q_bin_n is then used for distributing daqchm to daqchm_n
!
      do il = 1, ilev
         do i = il1, il2
            do k = int(rcrit(i, il)), isize
               aeronum_t = 0.0
               do j = 1, chm_intrsec_ndiv
                  jk = (k - 1) * chm_intrsec_ndiv + j
                  aeronum_t = aeronum_t + aeronum_n(i, il, jk)
               end do
              if(aeronum_t > 0.0 .and. q_bin(i, il, k) > 0.0) then
               if(k > int(rcrit(i, il))) then
                  do j = 1, chm_intrsec_ndiv
                     jk = (k - 1) * chm_intrsec_ndiv + j
                     q_bin_n(i, il, jk) = q_bin(i, il, k) * aeronum_n(i, il, jk) / aeronum_t
                     daqchm_n(i, il, jk) = daqchm(i, il, k) * q_bin_n(i, il, jk) / q_bin(i, il, k)
                  end do
               else
                  aeronum_tsub = aeronum_t * (rcrit(i, il)-int(rcrit(i, il)))
                  aeronum_t1 = 0.0
                  aeronum_t2 = 0.0
                  dlt = 1.0
                  do j = 1, chm_intrsec_ndiv
                  jk = (k - 1) * chm_intrsec_ndiv + j
                     aeronum_t1 = aeronum_t1 + aeronum_n(i, il, jk) * dlt
                     if (aeronum_t1 <=  aeronum_tsub) then
                        aeronum_t2 = aeronum_t1
                     else
                        q_bin_n(i, il, jk) = q_bin(i, il, k) * aeronum_n(i, il, jk) /  &
                                             (aeronum_t - aeronum_t2)
                        daqchm_n(i, il, jk) = daqchm(i, il, k) * q_bin_n(i, il, jk) / q_bin(i, il, k)
                        dlt = 0.0
                     end if
                  end do
               end if
              end if
            end do
         end do
      end do
!
      deallocate(q_bin_n)
!
   end if
!
!
!  Finished subdivision of inputs for condensation.
!  Call the original intrsec code to determine the mass transfer:
!
   call mach_cam_intrsec1_inner(lev, ilev, F_chm_ni, il1, il2, XROW_N, ntr_n, ntp, nbnd, &
                                daqchm_n, aeronum_n, rmass_n)
!  Reassign the mass back into the original xrow locations:
   do k = 1, isize
      do np = 1, ntp
         ik = (np - 1) * isize + k + iae1 - 1
         do il = 1, ilev
            do i = il1, il2
               xrow(i, il + 1, ik) = 0.0
               do j = 1, chm_intrsec_ndiv
                  jsub = (k - 1) * chm_intrsec_ndiv + j
                  jk = (np - 1) * nbnd + jsub
                  xrow(i, il + 1, ik) = xrow(i, il + 1, ik) + xrow_n(i, il + 1, jk)
               end do
            end do
         end do
      end do
   end do
!
   deallocate(aeronum_n)
   deallocate(daqchm_n)
   deallocate(xrow_n)
   deallocate(rmass_n)
   deallocate(v_n)
   deallocate(r_n)
   deallocate(dvn)
   deallocate(a_n)
   deallocate(rn)
!
   return
   end
