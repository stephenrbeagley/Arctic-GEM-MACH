!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_cam_cas.ftn90
! Creation       : S. Gong, W. Gong, S. Gravel and B. Pabla for GEM-MACH, June 2008
! Description    : This is a module of calculating the collection efficiency of
!                  the aerosols of type n by collector droplets of radius rcol.
! Extra info     : - First version created by S. Gong Jul 08 1994 for CAM
!                  - Vectorized the whole program and add some working spaces.
!                    (S. Gong, Dec 19, 1996)
!                  - Modified terminal/settling velocity for drops (> 20 um) and
!                    added gas scavenging rate calculations for H2O2, ROOH, HNO3
!                    and NH3. (W. Gong, May 2001)
!
! Arguments:  IN
!                  t    -> Temperature (K)
!              rhop     -> Final wet density
!             roarow    -> Air density (kg/m3)
!             rhsize    -> Wet radius
!            pressg     -> Grid row of surface pressure [Pa]
!                qr     -> rain water/snow
!               F_chm_ni-> number of longitude grid points
!               ilev    -> no. z-direct. vertical levels
!               lev     -> ilev+1
!               il1     -> minimum index for F_chm_ni
!               il2     -> maximum index for F_chm_ni
!               pdiff   -> diffusion coefficient
!              pdepv    -> gravitational settling velocity
!               shj     -> Local mid-layer sigma value
!
!            OUT
!               vpr     -> average settling velocity
!              colef    -> Rain scavenging efficiency
!              rscavg   -> Rain scavenging rate
!
!============================================================================

subroutine mach_cam_cas (t, COLEF, RSCAVG, rhop, roarow, rhsize, pressg, qr,   &
                         F_chm_ni, ilev, lev, isize, il1, il2, VPR, pdiff, pdepv, shj)
   use chm_consphychm_mod
   use chm_species_idx_mod
   use chm_species_info_mod
   implicit none


   integer, intent(in)                            :: F_chm_ni, ilev, lev, isize
   integer, intent(in)                            :: il1, il2
   real, intent(in),  dimension(F_chm_ni, lev)         :: t
   real, intent(in),  dimension(F_chm_ni, ilev)        :: roarow, qr, shj
   real, intent(in),  dimension(F_chm_ni, ilev, isize) :: rhop, rhsize, pdepv, pdiff
   real, intent(in),  dimension(F_chm_ni)              :: pressg
   real, intent(out), dimension(F_chm_ni, ilev)        :: vpr
   real, intent(out), dimension(F_chm_ni, ilev, isize) :: colef
!  scavenging rate (by falling rain drops) for h2o2, rooh, hno3, nh3
   real, intent(out), dimension(F_chm_ni, ilev, 4)     :: rscavg

!  local variables
   integer :: n, l, i
   real :: amuw, tl, r, amu, amfp, schm, dg0, dg_h2o2, dg_rooh
   real ::          dg_hno3, dg_nh3, prii, priiv, cfac, re, x, tempc, sigma
   real ::          bond, phys, rephalf, aaa, sh_h2o2, sh_rooh, sh_hno3, sh_nh3
   real ::          rn0s, st, rr, vr, sstar, colimp, pin0s, rlambds
   real, dimension(F_chm_ni) :: rrm, alpha

   real :: mwt_h2o2, mwt_rooh, mwt_hno3, mwt_nh3
!  updated based on Seinfeld & Pandis (1998) (Allen & Raabe, 1982)
   real, parameter :: aa1 = 1.257, aa2 = 0.4, aa3 = 1.1
!  universal gas constant (in g m2 s-2 mole-1 K-1)
   real, parameter :: rhorain = 1000.0
!  parameters for calculating RE for drops (20 um < Dp <= 1 mm)
!  (Jacobson, 1999; Beard, 1976)
   real, parameter ::    b0 = -3.18657, b1 = 0.992696, b2 = -0.00153193
   real, parameter ::    b3 = -0.000987059, b4 = -0.000578878, b5 = 0.0000855176
   real, parameter ::    b6 = -0.00000327815
!  parameters for calculating re for drops (1 mm < dp <= 7 mm)
!  (jacobson, 1999; beard, 1976)
   real, parameter ::    bb0 = -0.500015e+01, bb1 = 0.523778e+01, bb2 = -0.204914e+01
   real, parameter ::    bb3 = 0.475294, bb4 = -0.542819e-01, bb5 = 0.238449e-02
!  a small number to avoid overflow
   real, parameter ::    smf = 1.0e-30

   aaa      = 0.0
   alpha    = 0.0
   amfp     = 0.0
   amu      = 0.0
   amuw     = 1.002e-3  !at 20 c [kg /m/sec]
   bond     = 0.0
   cfac     = 0.0
   colef    = 0.0
   colimp   = 0.0
   dg0      = 0.0
   dg_h2o2  = 0.0
   dg_hno3  = 0.0
   dg_nh3   = 0.0
   dg_rooh  = 0.0
   phys     = 0.0
   pin0s    = 0.0
   prii     = 0.0
   priiv    = 0.0
   r        = 0.0
   re       = 0.0
   rephalf  = 0.0
   rlambds  = 0.0
   rscavg   = 0.0
   rn0s     = 0.0
   rr       = 0.0
   rrm      = 0.0
   schm     = 0.0
   sh_h2o2  = 0.0
   sh_hno3  = 0.0
   sh_nh3   = 0.0
   sh_rooh  = 0.0
   sigma    = 0.0
   sstar    = 0.0
   st       = 0.0
   tempc    = 0.0
   tl       = 0.0
   vr       = 0.0
   x        = 0.0



!  molecular weight for h2o2, rooh, hno3, nh3
   mwt_h2o2 = sm(sp_H2O2) % mol_wt
   mwt_rooh = sm(sp_ROOH) % mol_wt
   mwt_hno3 = sm(sp_HNO3) % mol_wt
   mwt_nh3  = sm(sp_NH3 ) % mol_wt

   do n = 1, isize
      do l = 1, ilev
         do i = il1, il2

!  in case of precipitation
            vpr(i, l) = 0.0
            if (qr(i, l) > 1.0e-15) then
               tl = t(i, l + 1)
               r = rhsize(i, l, n)

!  air's dynamic viscosity
               amu = 145.8 * 1.0e-8 * tl ** 1.5 / (tl + 110.4)

!  mean molecular free path. K.V. Beard [1976], J Atm. Sci., 33
!
               amfp = 6.54e-8 * (amu / 1.818e-5) * (1.013e5 / (pressg(i) &
                     * shj(i, l))) * (tl / 293.15) ** (1.0 / 2.0)
!  stokes friction and diffusion coefficients.
               schm = amu / pdiff(i, l, n) / roarow(i, l)
!  gas diffusivity for h2o2, rooh, hno3, nh3,
!  note 3 / (8. * a * d**2) = 3.0751e-06, with a = 6.02213e+23 and d = 4.5e-10 m
               dg0 = 3.0751e-06 / roarow(i, l) * 0.001 * sqrt(gask * tl * mwt_air / 2.0 / pi)
               dg_h2o2 = dg0 * sqrt((mwt_air + mwt_h2o2) / mwt_h2o2)
               dg_rooh = dg0 * sqrt((mwt_air + mwt_rooh) / mwt_rooh)
               dg_hno3 = dg0 * sqrt((mwt_air + mwt_hno3) / mwt_hno3)
               dg_nh3  = dg0 * sqrt((mwt_air + mwt_nh3)  / mwt_nh3)

!  collector drop size
               if (tl > 273.15) then

!  for rain: mass mean raindrop radius (rrm), factor 1.e-3 converts mm into m.
                  rrm(i) = 0.35 * (qr(i, l) * 3600.0) ** 0.25 * 1.0e-3  !assuming qr in kg
!  note qr is in m s-1 from input, while the precip. rate
!  needed in the following formula requires qr in mm hr-1!
!  rrm(i) = 0.35 * (qr(i, l) * 3600. * 1000.)**0.25 * 1.e-3
                  prii = 2.0 / 9.0 * grav / amu
                  priiv = prii * (rhorain - roarow(i, l))

!  cunningham slip correction factor settling velocity
                  cfac = 1.0 + amfp / rrm(i) * (aa1 + aa2 * exp(-aa3 * rrm(i) / amfp))
                  vpr(i, l) = priiv * rrm(i) ** 2 * cfac
                  re = roarow(i, l) * vpr(i, l) * 2.0 * rrm(i) / amu
!  re and vpr for moderate drops (i.e. 20 um < dp <1 mm),
!  and for large drops (i.e. 1 mm < dp < 7 mm)
!  Beard (1976), Jacobson (1999)
                  if (rrm(i) > 20.0e-06 .and. rrm(i) <= 0.0005) then
                  x = log(32.0 * rrm(i) ** 3 / 3.0 / amu ** 2 * (1000.0 - roarow(i, l)) &
                    * roarow(i, l) * 9.81)
                  re = cfac * exp(b0 + b1 * x + b2 * x * x + b3 * x * x * x + b4 * x * x * x * x +  &
                       b5 * x * x * x * x * x + b6 * x * x * x * x * x * x)
                  vpr(i, l) = re * amu / roarow(i, l) / 2.0 / rrm(i)
                  end if
                  if (rrm(i) > 0.0005) then
                     tempc = tl - 273.15
                     sigma = 76.1 - 0.155 * tempc
                     sigma = sigma * 0.001
                     bond = 16.0 / 3.0 * (1000.0 - roarow(i, l)) * 9.81 / sigma * rrm(i) ** 2
                     phys = sigma ** 3 * roarow(i, l) ** 2 / (amu ** 4 * (1000.0 - roarow(i, l)) * 9.81)
                     x = log(bond * phys ** (1.0 / 6.0))
                     re = phys ** (1.0 / 6.0) * exp(bb0 + bb1 * x + bb2 * x * x + bb3 * x * x * x +  &
                          bb4 * x * x * x * x + bb5 * x * x * x * x * x)
                     vpr(i, l) = re * amu / roarow(i, l) / 2.0 / rrm(i)
                  end if
!  Sherwood number
                  rephalf = sqrt(re)
                  aaa = amu / roarow(i, l)
                  sh_h2o2 = 2.0 + 0.6 * rephalf * (aaa / dg_h2o2) ** 0.3333
                  sh_rooh = 2.0 + 0.6 * rephalf * (aaa / dg_rooh) ** 0.3333
                  sh_hno3 = 2.0 + 0.6 * rephalf * (aaa / dg_hno3) ** 0.3333
                  sh_nh3  = 2.0 + 0.6 * rephalf * (aaa / dg_nh3)  ** 0.3333

               end if
               if (tl <= t1s .and. tl >= t1s - 8.0) then
!  Needle snow scavenging
!  data from slinn(1984) in atmospheic science and power production, ed. darryl randerson.
!  for snow scavenging, the density of snow is set as 1/10 of liquid water.
!  The factor 1.0e-2 in the wetdep calculation takes this into account plus the unit change
!  into m s-1
                  vpr(i, l) = 50.0e-2         !average settling velocity
                  rrm(i)    = 10.0e-6         !characteristic capture lehg
                  alpha(i)  = 1.0
!  parameter rn0s used for scavenging of gases (hno3 and nh3)
                  rn0s      = 0.05
               end if
               if (tl < t1s - 8.0 .and. tl >= t1s - 25.0) then
!  Steller snow scavenging
                  vpr(i, l) = 57.0e-2
                  rrm(i)    = 100.0e-6
                  alpha(i)  = 0.5
                  rn0s      = 0.1             ! for gas scavenging
               end if
               if (tl < t1s - 25.0) then
!  Graupel scavenging
                 vpr(i, l) = 180.0e-2
                 rrm(i)    = 1000.0e-6
                 alpha(i)  = 2.0 / 3.0
                 rn0s      = 1.0              ! for gas scavenging
               end if

!  Reynold number
               re = rrm(i) * vpr(i, l) * roarow(i, l) / amu

!  Stokes number of collected particels
               st = 2.0 * pdepv(i, l, n) / grav * (vpr(i, l) - pdepv(i, l, n)) / (2.0 * rrm(i))

!  Ratio of radius of collected particel and collector drop
               rr    = r / rrm(i)
               vr    = amuw / amu
               sstar = (1.2 + (1.0 / 12.0) * log(1.0 + re)) / (1.0 + log(1.0 + re))
               if (st > sstar) then
                  colimp = ((st - sstar) / (st - sstar + 2.0 / 3.0)) ** (3.0 / 2.0) * sqrt(1000.0 / rhop(i, l, n))
               else
                  colimp = 0.0
               end if
               if (tl > 273.15) then
!  Rain scavenging efficiency
                  colef(i, l, n) = 4.0 / (re * schm) * (1.0 + 0.4 * sqrt(re) * schm **          &
                                   (1.0 / 3.0) + 0.16 * sqrt(re * schm)) + 4.0 * rr * (1.0 / vr &
                                 + (1.0 + 2.0 * sqrt(re)) * rr) + colimp
!  Rain scavenging rate for soluble gases (h2o2, rooh, hno3, nh3)
!  Based on gamma = 3/2*qr/ut*sh*dg/dp**2, derived from Seinfeld & Pandis (1998)
                  rscavg(i, l, 1) = sh_h2o2 * dg_h2o2 / 2.0 / rrm(i) *                &
                                    (qr(i, l) / 1000.0 / vpr(i, l)) * (3.0 / rrm(i))
                  rscavg(i, l, 2) = sh_rooh * dg_rooh / 2.0 / rrm(i) *                &
                                    (qr(i, l) / 1000.0 / vpr(i, l)) * (3.0 / rrm(i))
                  rscavg(i, l, 3) = sh_hno3 * dg_hno3 / 2.0 / rrm(i) *                &
                                    (qr(i, l) / 1000.0 / vpr(i, l)) * (3.0 / rrm(i))
                  rscavg(i, l, 4) = sh_nh3 * dg_nh3 / 2.0 / rrm(i) *                  &
                                    (qr(i, l) / 1000.0 / vpr(i, l)) * (3.0 / rrm(i))
               else
!  Snow scavenging efficiency
                  colef(i, l, n) = (1.0 / schm) ** alpha(i) +  &
                                   (1.0 - exp(-(1 + sqrt(re)) * rr ** 2)) + colimp
!  Snow scavenging rates for gases (hno3 and nh3) same as in adom, where the scavenging rates
!  for hno3 and nh3 are set to be twice the rate for h2so4, which is similar to the rate
!  of collection of supercool water drops by snow/ice.
                  pin0s = pi * rn0s
                  rlambds = (pin0s * 1.31 / (qr(i, l) / 1000.0 + smf)) ** 0.25 !qr in kg m-2 s-1
                  rscavg(i, l, 3) = pin0s / 2.0 * 0.04 * (1.013e5 / (pressg(i)        &
                                   * shj(i, l))) ** 0.4 * (2.22 * 131.01 / rlambds ** 3.11)
                  rscavg(i, l, 4) = rscavg(i, l, 3)
                  rscavg(i, l, 1) = 0.0
                  rscavg(i, l, 2) = 0.0
               end if
!  Set the upbound for collection efficiency
               colef(i, l, n) = max(0.0, min(1.00, colef(i, l, n)))
            end if
         end do
      end do
   end do
   return
end
