!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_gas_jcorr.ftn90
! Creation       : P. Makar, B. Pabla for GEM-MACH, Feb 2007.
!                  P. Makar, W. Gong,  A. Dastoor, September 8, 1998
!
! Description    : Calculates the clear sky correction factor of Chang et al.,
!                  JGR 92, pp 14, 681-14, 700, 1987
!
! Extra info     : corr(x, y, z) = ( 1 + a(x, y) * ( Fcld (x, y, z) - 1) )
!                  a(x, y) is the fraction of the sky which is cloudy
!                  For solar zenith angles (chi) less than 60 degrees,
!                  Fcld = 1 + (1 - tr) * cos (chi) above cloud layer
!                       = 1.4 cos(chi)             in cloud layer
!                       = 1.6 tr * cos(chi)        below cloud layer
!                  For solar zenith angles greater than 60 degrees, the 60 degree
!                  value is used.
!                  "tr" is the energy transmission coefficient for normally incident light
!                  tr= (5 - exp(-tau) ) / (4 + 3*tau*(1 - f) )
!                  f = scattering phase function asymmetry factor = 0.86
!                  tau = cloud optical depth
!                      = sum(i)  3 L(i) dz(i) / (2 rho_h2o r)
!                  That is, the total optical depth is the sum of the optical depths
!                  of each cloudy layer.
!
!                  Important Note: Chang et al's correction is for a single cloud
!                  layer, while the information available from the current
!                  meteorological model allows for multiple cloud layers.  This version
!                  of the correction factor assumes an "average cloud"; summing the
!                  optical depths over height to get the net value, then assuming the
!                  existance of a single cloud over the given cloudy region.  No
!                  attempt in this version of the correction factor to account for
!                  multiple cloud layer effects.
!
! Arguments:  IN
!               nxy -> Number of gridpoints in h. slice; x times y
!               nz  -> Number of gridpoints in z direction
!               cx  -> Cosine of solar zenith angle
!               qc  -> Average liquid water content in gridsquare, kg/kg
!               mh  -> Momentum level heights: layer boundaries for model thermo. heights
!               th  -> Thermodynamic heights
!               rho -> Density of air, kg/m3
!               nu  -> Cloud fraction within a given layer
!
!              OUT
!                jc  -> Correction factor for J values
!============================================================================
subroutine mach_gas_jcorr (cx, qc, mh, th, nu, rho, JC, nxy, nz)
   use chm_utils_mod
   use chm_consphychm_mod

   implicit none


!  Arguments
   integer, intent(in)     :: nxy, nz
   real,    intent(in)     :: cx(nxy), qc(nxy, nz), mh(nxy, nz), th(nxy, nz), nu(nxy, nz), rho(nxy, nz)
   real,    intent (inout) :: jc(nxy, nz)

!  Declare other variables
   real :: den, rdrop, lconmin, alim, qmn
   parameter (rdrop = 1.0e-05)     !radius of typical cloud drop, m.
   parameter (lconmin = 1.0e-04)   !minimum liquid water content, g/m3,
   parameter (alim = 1.0e-09)      !smallest allowable cloud fraction before layer can be considered to be "cloudless"
   integer :: i, k

   real    :: chim(nxy), tau(nxy)
   integer :: kmin(nxy), kmax(nxy)
   integer :: kwat(nxy, nz)
   real    :: fbelow(nxy, nz), fin(nxy, nz), fabove(nxy, nz), a(nxy, nz), aip(nxy, nz), afrac(nxy, nz)

   den = 1.0 / (2.0 * rho_h2o * rdrop)

!  maximum solar zenith angle will be less than or equal to 60 degrees
!  (1.047 radians); cos(chi) > 0.5
   do i = 1, nxy
      chim(i) = max(0.5, cx(i))
   end do

!  determine fraction of the sky which is cloudy
! (1) average the two time steps of cloud fraction data,
   do k = 1, nz
      do i = 1, nxy
         a(i, k) = nu(i, k)
      end do
   end do

! (2) avoid division by zero error for cloud fraction:
!  afrac is 1 if the area fraction is greater than the minimum
!  allowed, zero otherwise.
   do k = 1, nz
      do i = 1, nxy
         aip(i, k) = 1.0 / max(a(i, k), alim)
         afrac(i, k) = max(sign(1.0, a(i, k) - alim), 0.0)
      end do
   end do

!  calculate total cloud optical depth:
   do i = 1, nxy
      tau(i) = 0.0
   end do
   do k = 1, nz
      do i = 1, nxy
!  jc temporarily used to store cloud liquid water content
!  in g/m3. multiply by zero if area fraction of cloud is
!  less than lower limit.
         jc(i, k) = max(qc(i, k) * 1000.0 * rho(i, k) &
                     * afrac(i, k), 0.0)
      end do
!  Liquid water content was average for entire grid square.
!  Divide this by the area fraction to get the liquid water
!  content, assuming that all of the liquid water is in
!  clouds.  Note that ami was set earlier to ensure that
!  division by zero error does not occur.  Presumably, jc should
!  be zero if nu is zero anyway; this is just in case there's
!  different round off levels for the two variables.
      do i = 1, nxy
         jc(i, k) = jc(i, k) * aip(i, k)
      end do
   end do

!  Liquid water check: if qc is negative, find its magnitude and
!  write this out to unit 6:
   qmn = 0.0
   do k = 1, nz
      do i = 1, nxy
      qmn = min(qmn, qc(i, k))
      end do
   end do
!    write (chm_lun_out, *) 'minimum value of qc: ', qmn

!  calculate the total optical depth in the vertical direction
!  due to clouds.  Note that the momentum height surfaces are
!  assumed to be the boundaries of each model layer, except for
!  the ground level.


!  top half-layer:
   do i=1, nxy
      tau(i) = tau(i) + 3.0 * jc(i, 1) * (th(i, 1) - mh(i, 1) ) * den
   end do
!  middle layers:
   do k = nz, 3, -1
      do i = 1, nxy
         tau(i) = tau(i) + 3.0 * jc(i, k-1) * ( mh(i, k-2) - mh(i, k-1) ) * den
      end do
   end do
!  bottom layer: thermodynamic level = ground level
   do i = 1, nxy
         tau(i) = tau(i) + 3.0 * jc(i, nz) * (mh(i, nz-1) - th(i, nz)) * den
   end do

!  calculate cloud transmission coefficient; replace optical
!  depth with transmission coefficient:
   do i = 1, nxy
      tau(i) = (5.0 - exp(-tau(i))) / (4.0 + 0.42 * tau(i))
   end do

!  determine maximum, minimum layer indices for which
!  liquid water is present.  kwat will be the 1.0 value
!  if cloud exists in the given model layer, 0 if no cloud
!  exists in the layer.
   do k = 1, nz
      do i = 1, nxy
   kwat(i, k) = int(max(sign(1.0, jc(i, k) - lconmin), 0.0))
      end do
   end do
   do i = 1, nxy
      kmin(i) = 0
      kmax(i) = 0
   end do

!  again, code is changed due to change in direction
!  of vertical index:
   do k = 1, nz
      do i = 1, nxy
      kmin(i) = max(kmin(i), k * kwat(i, k))
      kmax(i) = max(kmax(i), (nz - k + 1) * kwat(i, k))
      end do
   end do
   do i=1, nxy
      kmax(i) = (nz - kmax(i) + 1)
   end do

!  kmin(i) now contains the vertical index of the lowest altitude
!  layer which contains cloud, kmax(i) contains the vertical index of
!  the highest altitude layer index which contains cloud.
!
!  we now have a "cloud", extending from
!  layer kmin(i) up to layer kmax(i), with transmission coefficient
!  tau(i).  calculate fcld parameter (in jc array, temporarily):
   do k = 1, nz
      do i = 1, nxy
      jc(i, k) = 1.0
      end do
   end do

!  calculate below, within, above cloud values:
   do k = 1, nz
      do i = 1, nxy
         fbelow(i, k) = 1.6 * tau(i) * chim(i)
         fin(i, k) = 1.4 * chim(i)
         fabove(i, k) = 1.0 + (1.0 - tau(i)) * chim(i)
      end do
   end do

!  assign these to the appropriate layers:
!  note modification for layer structure:
   do i = 1, nxy
      do k = kmin(i) + 1, nz
         jc(i, k) = fbelow(i, k)
      end do
      do k = kmax(i), kmin(i)
         jc(i, k) = fin(i, k)
      end do
      do k = 1, kmax(i) - 1
         jc(i, k) = fabove(i, k)
      end do
   end do

!  calculate cloud fraction, place in tau array.  the maximum value
!  of any given layer is used as the area fraction for the entire
!  average cloud.  this is a conservative estimate, making the
!  assumption that all layers line up vertically.
   do i = 1, nxy
      tau(i) = 0.0
   end do
   do k = 1, nz
      do i = 1, nxy
         tau(i) = max(a(i, k), tau(i))
      end do
   end do

!  calculate the final clear sky correction factor:
   do k = 1, nz
      do i = 1, nxy
      jc(i, k) = 1.0 + tau(i) * (jc(i, k) - 1.0)
      end do
   end do

   return
   end
