!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet / Project : GEM-MACH
! Fichier / File   : mach_gas_drydep_solver.ftn90
! Creation         : A. Robichaud - Dec 2002
! Description      : new scheme for dry deposition of gas based on multiple
!                    resistance approach and single-layer "big leaf" approach
!                    (mostly based on work of WESELEY (1989,1996), ZHANG et al.
!                    2002 and ROBICHAUD, 1991 and 1994).
!
! Extra Info       : Modified by Bin He, Modify for thread safety - Oct 2003
!
!                    Modified by A. Kallaur, M. Moran, P.A. Beaulieu, A. Robichaud for GEM-MACH - Feb 2008
!
!                    For a good review of dry deposition modeling, see
!                    JACOBSON, 1999, "Fundamentals of Atmospheric Modeling",
!                    WESELEY and HICKS, 2000, "Atmospheric Environment" or
!                    Seinfeld and Pandis, 1998 "Atmospheric Chemistry and Physics".
!
!                    TO DO: - Calculate ustar locally so we have a non-averaged value
!                           - Move the calculation of aero_resist to its own subroutine
!                             (perhaps called from mach_gas_drydep_main.ftn90). Aerodynamic
!                             resistance is not species-dependant and should only be calculated
!                             once per timestep.
!
!
! Arguments:  IN
!
!    ni       -> length of gripdt row to work on
!
!    sp_i     -> Index of species into physical constants tables
!                alpha, beta, hstar, fzero
!
!    species  -> Unique species identifier (integer)
!
!    lmob_in  -> Monin-Obukhov length
!                Phyvar(MOL) (-1000.0-10000 m)
!
!    tsrf     -> Surface temperature (K)
!                NOTE: Two choices here:
!                      1) Take TSURF; averaged skin Temp from PHY (ISBA)
!                      2) Take TT(1) 1st level model temp
!                      In discussion with B. Bilodeau Nov 22 2007, he mentioned
!                      that the most appropriate option is 1).
!
!    ustar_in -> Surface friction velocity (m/s) taken from Phyvar(UE)
!
!    hu       -> Specific humidity
!
! sol_flux_in -> Downwards visible solar flux
!                Phyvar(FLUSOLIS)  (W/m2)
!
!  prec_rt_in -> Precipitation rate (m/s)
!                Phyvar (U1 or RAINRATE from volatile bus)
!
!      season -> Seasonal categories
!                  1  midsummer with lush vegetation
!                  2  autumn with cropland before harvest
!                  3  later autumn after frost, no snow
!                  4  winter, snow on ground and subfreezing
!                  5  transitional spring with partially green short annuals
!
!         lfu -> Land Form Use
!                CHEMVar(LAND_USE_15) from Chemical permanent bus
!                Derived from the CMC26 category data set into 15 category
!                set in subroutine "mach_landuse"
!
!          sd -> Snow depth (m)
!                PhyVar(SD)
!
!       psrf ->  Surface presssure (Pa)
!                PhyVar(2p -> pplus from Dyn bus)
!
! Arguments:     OUT
!    VD       -> Deposition velocity for specie "species"   (m/s)
!
! AERO_RESIST -> Aerodynamic resistance for species "species" (s/m)
!
! DIFF_RESIST -> Molecular diffusion resistance for species "species" (s/m)
!
! SURF_RESIST -> Total surface resistance for species "species" (s/m)
!
!============================================================================!

subroutine mach_gas_drydep_solver(VD         , AERO_RESIST, DIFF_RESIST,     &
                                  SURF_RESIST, season     , lfu        ,     &
                                  lmob_in    , sol_flux_in, tsrf       ,     &
                                  ustar_in   , prec_rt_in , sd         ,     &
                                  psrf       , hu         , ni         ,     &
                                  species    , sp_i                          )

   use chm_utils_mod
   use chm_consphychm_mod
   use mach_gas_drydep_mod
   use chm_species_info_mod
   use chm_species_idx_mod
   implicit none


!  Declare subroutine input arguments
   integer,                    intent(in)  :: ni, sp_i, species
   real, dimension(ni),        intent(in)  :: lmob_in, hu, sd, psrf
   real, dimension(ni),        intent(in)  :: tsrf, prec_rt_in, ustar_in
   real, dimension(ni),        intent(in)  :: season, sol_flux_in
! Land use and land use-dependant aerodynamic resistance - implicit conversion from the 1D vector
   real, dimension(ni,lucprm), intent(in)  :: lfu
   real, dimension(ni,lucprm), intent(out) :: aero_resist
   real, dimension(ni),        intent(out) :: vd,  diff_resist, surf_resist

!  Local variables
   real    :: lmob, kst, ksqp, ksde, ksca, ksx
   real    :: psic, tsurf, humr, href1
   real    :: sat_h2o_pressure, srad, b7, de, tl
   real    :: th, t0, rcut, rsx, rconv, rexp, q_avsd, q_avsf, q_avsn
   real    :: rsoil, rcan, iuss, lain, laid, rnsinv
   real    :: rinvrcx, precip, lai, rmx, vdf
   real    :: wst, psic1, psic2, dh2odx, schmidt_num, expts
   real    :: ustar, rrt, roughlen
   integer :: i, j,icount,icounti,icountsi,icounts,icountl,icountsf,icountsd
   integer :: isnow, iprec, isea, nlus, print_index
   logical :: local_dbg

! Local constants
   real, parameter :: ref_hgt = 10.0
   real, parameter :: max_lmob_neg = -0.01
   real, parameter :: min_lmob_pos = 0.01

!  Code for dry deposition of gaseous species begins here

   local_dbg = (.false. .or. global_debug)

   if (local_dbg) then
      write(chm_lun_out, *) ' Begin mach_gas_drydep_solver:'
   end if

   isnow = 0
   iprec = 0

!  Molecular diffusivity of gas  with respect to H2O
   dh2odx = sqrt(2.608 / (1.0 + 28.9644 / species_master(species) % mol_wt))
   schmidt_num     = 0.84 * dh2odx

  !  Initialize deposition velocity table
  vd(1:ni) = 0.0

!  Set fluxes,radiation and deposition vel. over entire domain
   do i = 1, ni

      lmob     = lmob_in (i)
      ustar    = ustar_in(i)

      ! For sulfates use formulation parametrization
      ! from walcek et al. (1986)

      if (species == sp_SO4) then

         ! stable case
         if (lmob >= 0.0) then
            vd(i) = ustar / 500.0
         ! unstable case
         else
            lmob = min(lmob, max_lmob_neg)
            vd(i) = (ustar / 500.0) * (1.0 + exp(-0.667 * log(-300.0 / lmob)))
         end if

      end if

   end do

!  Before beginning main loop over domain and land-use
!  categories, check if specie number is SO4.
!  If so, VD has already been calculated
!  (in previous loop over horiz. domain), and return
!  to calling subroutine.

   if (species == sp_SO4) then
      return
   end if
!
   icount=0
   icounti=0
   icountsi=0
   icounts=0
   icountl=0
   icountsf=0
   icountsd=0
   q_avsd=0.0
   q_avsf=0.0
   q_avsn=0.0
! Begin main loop over Domain
   do i = 1, ni

          IF (sd(i).NE.0.0) THEN
            WRITE(chm_lun_out,*)'DBG SD',i,sd(i),lfu(i,12),lfu(i,13),lfu(i,14),ni
            icountsd=icountsd+1
            q_avsd=q_avsd+sd(i)
          ENDIF
      ! loop over all LUC (Land Use Categories)
      do nlus = 1, lucprm

         if (lfu(i, nlus) < 0.01) then
            cycle
         end if

         lmob  = lmob_in (i)

! Converting from Kelvin to Celsius for dry deposition equations.
! Also, set a lower limit of -60C for temperature to prevent model 
! crashing over Antartica which happened in the global version 

         tsurf = amax1 (tsrf(i) - tcdk, -60.)
         srad  = sol_flux_in(i)
         ustar = max(ustar_in(i), 0.001)
         rrt   = prec_rt_in(i)

         ! put a filter on Monin-Obukhov length from GEM
         if (lmob >= 0.0) then
            lmob = max(lmob_in(i), min_lmob_pos)
         else
            lmob = min(lmob_in(i), max_lmob_neg)
         end if

         isnow    = 0
         isea     = nint(season(i))

         ! Take roughness length from look-up table
         roughlen = zz0(nlus, isea)

         ! Check for snow depth at particular grid point, and
         ! override Season value if there is.
         if (sd(i) > 0.005) then
            isnow = 1
            isea  = 4
         end if

         ! sat_h2o_pressure from GILL (in millibar)
         sat_h2o_pressure = amax1 (10.0 ** ((0.7859 + 0.03477 * tsurf) / (1.0 + 0.00412 * tsurf)), 1.0) !mb

         humr = amin1(psrf(i) * .01 * hu(i) / (0.622 * sat_h2o_pressure), 1.0) ! (pa-->mb) 

         psic = 0.0

         ! following discussion between A. ROBICHAUD & Y. DELAGE re: GEM (fall 2002), psic = psic'(href) - psic'(z0)
         href1 = ref_hgt - roughlen

         if ((ref_hgt / lmob) > 0.01) then
            psic = -5.0 * (href1 / lmob)
         else if ((ref_hgt / lmob) < -0.01) then
            psic1 = exp(0.598 + 0.39 * log(-ref_hgt / lmob) - 0.18 * log(-1.0 * ref_hgt / lmob))
            psic2 = exp(0.598 + 0.39 * log(-roughlen / lmob) - 0.18 * log(-1.0 * roughlen / lmob))
            psic  = psic1 - psic2
         end if

         ! if over ocean or lake, define roughlen (depends on wind over water)
         if ((nlus == 13) .or. (nlus == 14)) then
            roughlen = 0.11 * 1.5E-5 / ustar
         end if

         aero_resist(i, nlus) = (log((ref_hgt + roughlen) / roughlen) - psic) / (karman * (ustar + 0.001))

         if (aero_resist(i, nlus) < 0.0) then
            aero_resist(i, nlus) = 0.0
         end if

         diff_resist(i) = 2.0 * exp(0.6667 * log(schmidt_num / prandtl)) / (karman * (ustar + 0.001))

         ! Jarvis scheme for water vapor
         ! ksqp = correction for solar flux, kst: correction for temp.,
         ! ksde = correction for humidity (vapor pressure),
         ! ksca = correction for CO2
         if (srad < 26.76) then
            srad = 26.76
         end if

         b7  = ao * log(log(srad)) - bo

         de  = (1.0 - humr) * sat_h2o_pressure ! de: in millibar

         if (humr > 1.2) then
            write(chm_lun_out, *) '### Error in mach_gas_drydep_solver ###'
            write(chm_lun_out, *) '# variable de is < 0 ; humr > 100%'
            write(chm_lun_out, *) '# (i) : (',i,' )'
            write(chm_lun_out, *) '# de,humr,sat_h2o_pressure',de,humr,sat_h2o_pressure
            write(chm_lun_out, *) '# tsurf,psrf',tsurf,psrf
            write(chm_lun_out, *) '###             ABORT               ###'
            call chm_stop('mach_gas_drydep_solver',-1)
         end if

         tl  = tmin(nlus)
         th  = tmax(nlus)
         t0  = topt(nlus)

         if ((tsurf > tl) .and. (tsurf < th)) then
            kst = ((tsurf - tl) * (th - tsurf) / ((t0 - tl) * (th - t0))) ** b4
         else
            kst = 0.0
         end if

         ! From JARVIS, 1976 adapted in Robichaud, 1994.
         ksqp = co * log(srad) - dzero

         if (ksqp < 0.0) then
            ksqp = 0.0
         end if

         ksde = 1.0 - 0.03 * de 

         if (ksde < 0.0) then
            ksde = 0.0
         end if

         if (cco2 < 100.0) then
            ksca = 1.0
         else if ((cco2 >= 100.0) .and. (cco2 <= 1000.0)) then
            ksca = 1.0 - b7 * cco2
         else
            ksca = 0.0
         end if

         ! Jacobson  scheme for ksqp (isimple =1 for testing purposes. Default is 0)
         if (isimple == 1) then
            ksqp = 1.0 / ( 1.0 + (200.0 / (srad + 0.1)) * (200.0 / (srad + 0.1)))
         end if

         ! total correction factor for stomatal conductance
         ksx = max(ksqp * kst * ksde * ksca, 0.0001)

         if (species == sp_O3) then  ! Ozone case

            if ((ksx <= 0.0) .or. (ksx > 1.5)) then
               write(chm_lun_out, *) 'Ozone ksx( ',i,' )= ',ksx
            end if

         end if

         ! final stomatal resistance for water vapor transfer (JARVIS)
         if ((rsmin(nlus, isea) < 0.0).or.(rsmin(nlus, isea) >= 9999.0)) then
            rsmin(nlus, isea) = 9999.0
         end if

         rsx = rsmin(nlus, isea) / ksx

         ! final stomatal resistance for gas "sp_i"
         rsx = rsx * dh2odx

         if (rsx >= 9999.0) then
            rsx = 9999.0
         end if

         ! leaf mesophyl resistance
         if (hstar(sp_i) >= 0.0 .and. fzero(sp_i) >= 0.0) then
            rmx = 1.0 / (hstar(sp_i) / 3000.0 + 100.0 * fzero(sp_i))
         else
            rmx = 0.0
         end if

         ! cuticular resistance
         ! if dew or rain rcut has to be changed (to be done in later version)
         ! WESELEY version
         if (hstar(sp_i) >= 0.0 .and. fzero(sp_i) >= 0.0) then
            rcut = rcutd(nlus, isea) / (1.0E-5 * hstar(sp_i) + fzero(sp_i))
         else
            rcut = 9999.0
         end if

         ! resistance of gases to buoyant convection
         rconv = 100.0 * (1.0 + 1000.0 / (srad + 10.0))

         ! resistance on leaves, twigs,bark and other exposed surfaces (WESELEY)
         if ((hstar(sp_i) >= 0.0) .and. (fzero(sp_i) >= 0.0)) then
            rexp = 1.0 / (1.0E-5 * hstar(sp_i) / rexpso2(nlus, isea) + fzero(sp_i) / rexpo3(nlus, isea))
         else
            rexp = 9999.0
         end if

         ! soil resistance from AURAMS
         rsoil = 1.0 / (alpha(sp_i) / rgdso2(nlus, isea) + beta(sp_i) / rgdo3(nlus, isea))

         ! canopy resistance (sometimes called rac: areodynamic canopy resis.)
         rcan = rcanp(nlus, isea)

         ! check if precipitation is present
         iprec  = 0
         wst    = 0.0
         precip = 3.6E06 * rrt

         if (precip > 1.0) then
            iprec = 1
         end if

         ! following ZHANG, wst = 0.5 if dew or precipitation
         if ((iprec == 1) .or. (humr >= 0.95)) then
            wst=0.5
         end if

         ! total surface resistance (see JACOBSON 1999, WESELEY 1989)
         rinvrcx = (1.0 - wst) / (rsx + rmx) + 1.0 / rcut + 1.0 / (rconv + rexp) + 1.0 / (rcan + rsoil)

         ! this part is only for ozone: new scheme for non-stomatal for ozone
         ! ref. ZHANG et al., Atmos. Env., 36, 2002.
         ! however if inew=1 treat all gases with this scheme
         lai = laindex(nlus, isea)

         ! the following is from ZHANG. et AL. (2002), Atmospheric Env.
         ! if rain or dew is present, switch to another equation (see, ZHANG
         ! et al., 2002).
         if ((insz == 1) .and. ((species == sp_O3) .or. (inew == 1))) then

            if ((lai > 0.001) .and. (lai < 10.0)) then

               iuss = 1.0 / (ustar * ustar)
               lain = exp(0.25 * log(lai))
               laid = 1.0 / lain

               if ((iprec == 1) .or. (humr >= 0.95)) then
                  ! for wet canopies
                  rcut=rcut / 20
                  rnsinv = 1.0 / (rcan * iuss * lain + rsoil) + sqrt(lai) * ustar / rcut
               else
                  ! for dry canopies
                  rnsinv = 1.0 / (rcan * iuss * lain + rsoil) + 1.0 / (rcut * exp(-0.03 * 100 * humr) * laid / ustar)
               end if

               rinvrcx = (1.0 - wst) / rsx + rnsinv

            end if

         end if

         ! adjustment for snow (see Robichaud, 1991)
         if (isnow == 1) then  
            expts   = 1000.0 * exp(-tsurf - 4.0)
            rinvrcx = 1.0 / (rcut + expts) + 1.0 / (rconv + rexp + expts) + 1.0 / (rcan + rsoil + expts)
         end if

         surf_resist(i) = 1.0 / rinvrcx

         if (surf_resist(i) < 0.0) then
            surf_resist(i) = 0.0
         end if

         ! dry deposition for gas "sp_i" for one LUC
         if (aero_resist(i, nlus) > 9999.0) then
            aero_resist(i, nlus)  =  9999.0
         end if

         if (diff_resist(i) > 9999.0) then
            diff_resist(i) =  9999.0
         end if

         if (surf_resist(i) > 9999.0) then
            surf_resist(i) =  9999.0
         end if

         vdf= 1.0 / (aero_resist(i, nlus) + diff_resist(i) + surf_resist(i))

         if (vdf < 0.0) then
            write(chm_lun_out, *) '>Warning'
            write(chm_lun_out, *) '>Dry deposition speed is negative at i = ', i
            vdf = 0.0
         end if

         ! special cases (see: WESELEY and HICKS, 2000, Atmospheric Env.)
         ! where current scheme does not work well
         if (species == sp_O3) then

            if ((nlus == 13) .and. (isnow == 0)) then
               vdf = 3.0E-4 ! original values was vdf = 1.0E-4
            else if (nlus == 14)  then
               vdf = 3.0E-4
            else if ((nlus == 9) .and. (isnow == 0)) then
               vdf = 1.5E-3
            end if

         end if

         vd(i) = vd(i) + lfu(i, nlus) * vdf

         if (vd(i) > 0.1) then
            vd(i) = 0.1
         endif

      end do  ! loop over all land use categories

   end do  ! loop over grid point row
! -------
   if ( icountsd.ne.0) then
      WRITE(chm_lun_out,*)'total  snow d points  =',  &
          icountsd,float(icountsd)/float(ni)*100.,'% ',ni
          WRITE(chm_lun_out,*)'av snow dpth  =',q_avsd/float(ni)
   endif
! -------
   if (local_dbg) then
      write(chm_lun_out, *) 'mach_gas_drydep_solver EXIT'
   end if

   return

end subroutine mach_gas_drydep_solver
