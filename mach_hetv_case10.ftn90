!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_hetv_case10.ftn90
! Creation       : P. Makar, V. Bouchet, A. Nenes, S. Gravel, B. Pabla, S. Menard
! Description    : Heterogeneous chemistry solver for case10.  Based on algorithm's
!                  in Nenes et al's ISORROPIA solver, recoded to vectorize over the
!                  gridpoint dimension.  All input arrays are of length npts (total
!                  number of gridpoints submitted from the calling code.  The
!                  subsection of each 1-D array between index ns10 and ne10 (inclusive)
!                  has been pre-sorted, and contains the gridpoint data that must
!                  be solved using case10's algorithm.  Operations within this
!                  subroutine therefore take place over array bounds from ns10 to ne10.
!
!                  Units on input are moles/kg air.
!
! Extra info :     Athanasios Nenes, Mail Code 210-41, Dept. of Chemical Engineering,
!                  California Institute of Technology, Pasadena, Ca., 91125, USA
!                  nenes@its.caltech.edu
!
!                  The conditions for which this case is called are as follows:
!                  TA/TS >= 2.0 , mdrh_amnit_amsul <= RH < drhamnit
!                  This case uses linear interpolation between the solutions for the
!                  systems of equations for "dry" and "wet" conditions.
!                  The dry case and conditions are:
!                  case 13, TA/TS >= 2.0, rh < mdrh_amnit_amsul
!                  The wet case and wet case conditions are:
!                  case 15, TA/TS >= 2.0, drhamnit <= RH < drhamsul
!                  Interpolation is based on the parameter WF1; the linear interpolant
!                  between wet and dry systems.  When WF1 = 1, the dry system is the
!                  solution, when WF1 = 0, the wet system is the solution.  Values of
!                  WF between these limits indicate an interpolation between the solutions
!                  for the wet and dry cases.
!                  For the conditions noted above, the value of WF is given by:
!                  wf = ( drhamnit - rh ) / ( drhamnit - mdrh_amnit_amsul)
!
! Arguments  IN
!
!            OUT
!
!=============================================================================

subroutine mach_hetv_case10 (npts, nr, ns10, ne10, so4, no3, nh4, hso4, hno3, h, nh3, amsul, ambis, amnit, &
                   leto, t, tc, p, rh, iter, itero, k0, p1, p2, eps, eps2, rho, lwn, ta, ts, tn, &
                   mdrh_amnit_amsul, drh_amnit, oh, ndiv, tstd, small, smrt)
   use mach_hetv_headers_mod, only: mach_hetv_case9, mach_hetv_case11
   implicit none

   integer, intent(in) :: npts, nr, ns10, ne10
   integer, intent(in) :: iter, itero, ndiv
   real *8, intent(in) :: tstd, small, smrt, eps, eps2
   real *8, intent(in), dimension(npts)  :: t, p, rh, tc, rho, mdrh_amnit_amsul, drh_amnit
   real *8, intent(in), dimension(nr)    :: k0, p1, p2
   real *8, intent(out), dimension(npts) :: so4, no3, nh4, hso4, amsul, ambis
   real *8, intent(out), dimension(npts) :: amnit, leto, h, hno3, nh3, lwn, oh
   real *8, intent(inout), dimension(npts) :: ta, ts, tn

!  Local variables:
   integer  :: i
   real *8 :: wfmin, wfmax
   real *8, dimension(npts) :: so4d, no3d, nh4d, hso4d, amsuld, ambisd, amnitd, letod, hd, hno3d, nh3d
   real *8, dimension(npts) :: wf, wf1

!  Array dimensioning check:
   if (ns10 < 1 .or. ns10 > npts .or. ne10 > npts .or. ne10 < ns10) then
      write(0, *) '### Error in mach_hetv_case10 ###'
      write(0, *) '# error in array bounds in case10'
      write(0, *) '###         ABORT         ###'
      call chm_stop('mach_hetv_case10', -1)
   end if

!  Calculate value of WF.
   wfmin = 2.0d0
   wfmax = -2.0d0
   do i = ns10, ne10
      wf(i) = (drh_amnit(i) - rh(i)) / (drh_amnit(i) - mdrh_amnit_amsul(i))
      wfmin = min(wfmin, wf(i))
      wfmax = max(wfmax, wf(i))
   end do
   if (wfmax > 1.0d0) then
      write(0, *) '### Error in mach_hetv_case10 ###'
      write(0, *) '# interpolant out of bounds ( > 1) in case10.'
      write(0, *) '###         ABORT         ###'
      call chm_stop('mach_hetv_case10', -1)
   end if
   if (wfmin < 0.0d0) then
      write(0, *) '### Error in mach_hetv_case10 ###'
      write(0, *) '# interpolant out of bounds ( < 0) in case10.'
      write(0, *) '###         ABORT         ###'
      call chm_stop('mach_hetv_case10', -1)
   end if
!IBM* UNROLL(8)
   do i = ns10, ne10
      wf1(i) = min(max(1.0d0 - wf(i),0.D0),1.D0)
   end do

!  Calculate dry particle gases and components using Case 9.

   call mach_hetv_case9(npts, nr, ns10, ne10, so4d, no3d, nh4d, hno3d, nh3d, amsuld, ambisd, amnitd, letod, t,  &
              k0, p1, p2, rho, lwn, ta, ts, tn, tstd, smrt)

!  Calculate wet particle gases and components using Case 11 .

   call mach_hetv_case11(npts, nr, ns10, ne10, so4, no3, nh4, hso4, hno3, h, nh3, amsul, ambis, amnit, leto, t, &
                        tc, p, rh, iter, itero, k0, p1, p2, eps, eps2, rho, lwn, ta, ts, tn, oh, ndiv, tstd,   &
                        small, smrt)

!  Interpolate between the two cases to get the final result (which
!  replaces the array variables used for the wet case):

   do i = ns10, ne10
      oh(i)   = wf1(i) * oh(i)
      h(i)    = wf1(i) * h(i)
      nh4(i)  = wf1(i) * nh4(i)
      no3(i)  = wf1(i) * no3(i)
      hso4(i) = wf1(i) * hso4(i)
      so4(i)  = wf1(i) * so4(i)

!  Solid phases, gases:
      amsul(i) = wf(i) * amsuld(i) +  wf1(i) * amsul(i)
      amnit(i) = wf(i) * amnitd(i) +  wf1(i) * amnit(i)
      ambis(i) = wf(i) * ambisd(i) +  wf1(i) * ambis(i)
      leto(i)  = wf(i) * letod(i)  +  wf1(i) * leto(i)
      nh3(i)   = wf(i) * nh3d(i)   +  wf1(i) * nh3(i)
      hno3(i)  = wf(i) * hno3d(i)  +  wf1(i) * hno3(i)

!  Liquid water content:
!     lwn(i) = wf1(i) * lwn(i)
   end do

return
end
